Timer unit: 1e-09 s

Total time: 40.4265 s
File: /home/ubuntu/mSAID/main2.py
Function: main at line 42

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    42                                           def main():
    43                                               # dataset
    44         1       1422.0   1422.0      0.0      arguments = sys.argv[1:]
    45         1        962.0    962.0      0.0      examples = int(arguments[0])
    46         1        390.0    390.0      0.0      features = int(arguments[1])
    47         1        251.0    251.0      0.0      chunk = 100
    48                                               # sub_dataset
    49         1       7313.0   7313.0      0.0      nodes = MPI.COMM_WORLD.Get_size() - 1
    50         1        561.0    561.0      0.0      sub_examples = examples * 5 // 6
    51         1        250.0    250.0      0.0      sub_features = features // nodes
    52         1        170.0    170.0      0.0      targets_rank = 0
    53         1        161.0    161.0      0.0      target_length = 1
    54         1       1182.0   1182.0      0.0      folder_path = "./data/SVM_{}_{}".format(examples, features)
    55                                           
    56         1      26660.0  26660.0      0.0      file = open("./data/log/SVM_{}_{}_log_{}.txt".format(examples, features,nodes), 'a')
    57         1        551.0    551.0      0.0      sys.stdout = file
    58         1        611.0    611.0      0.0      sys.stdout = sys.__stdout__
    59                                           
    60         1        190.0    190.0      0.0      secret_key = "secret_key"
    61                                           
    62                                               # shprg
    63         1        190.0    190.0      0.0      n = 1
    64         1        330.0    330.0      0.0      m = sub_features + target_length
    65         1        200.0    200.0      0.0      EQ = 128
    66         1        140.0    140.0      0.0      EP = 64
    67         1       1112.0   1112.0      0.0      q = 2**EQ
    68         1        581.0    581.0      0.0      p = 2**EP
    69         1       5250.0   5250.0      0.0      seedA = bytes(0x355678)
    70                                           
    71         1        180.0    180.0      0.0      precision_bits = 16
    72         1       2524.0   2524.0      0.0      encoder = FixedPointEncoder(precision_bits=precision_bits)
    73                                           
    74         1  136574744.0    1e+08      0.3      shprg = SHPRG(input=n, output=m, EQ=EQ, EP=EP, seedA=seedA)
    75                                           
    76         1       2685.0   2685.0      0.0      global_comm = MPI.COMM_WORLD
    77         1       3827.0   3827.0      0.0      global_rank = global_comm.Get_rank()
    78         1       1102.0   1102.0      0.0      global_size = global_comm.Get_size()
    79                                           
    80         1      11271.0  11271.0      0.0      global_grp = global_comm.Get_group()
    81         1      10500.0  10500.0      0.0      client_grp = global_grp.Excl([global_size - 1])
    82         1  786184067.0    8e+08      1.9      client_comm = global_comm.Create(client_grp)
    83         1       5400.0   5400.0      0.0      client_rank = None if client_comm == MPI.COMM_NULL else client_comm.Get_rank(
    84                                               )
    85         1       1693.0   1693.0      0.0      client_size = client_grp.Get_size()
    86                                           
    87         1        521.0    521.0      0.0      is_server = False
    88         1       1072.0   1072.0      0.0      if global_rank == global_size - 1:
    89                                                   is_server = True
    90         1        441.0    441.0      0.0      server_rank = global_size - 1
    91                                           
    92         1       7444.0   7444.0      0.0      timer = Timer()
    93                                           
    94                                               #* initial node
    95         1       1092.0   1092.0      0.0      if is_server:
    96                                                   node = Node(None, None, global_comm, client_comm)
    97                                                   temp_dataset = []
    98                                                   temp_prg_dataset = []
    99                                                   temp_folder_path = folder_path + "/temp"
   100                                                   for i in range(client_size):
   101                                                       temp_path = "{}/SVM_{}_{}_{}-{}_temp.hdf5".format(
   102                                                           temp_folder_path, examples, features, i, nodes)
   103                                                       temp_dataset.append(
   104                                                           HDF5Dataset.empty(file_path=temp_path,
   105                                                                             data_shape=(sub_features, ),
   106                                                                             targets_shape=(),
   107                                                                             dtype=np.int64))
   108                                                       temp_prg_path = "{}/SVM_{}_{}_{}-{}_temp_prg.hdf5".format(
   109                                                           temp_folder_path, examples, features, i, nodes)
   110                                                       temp_prg_dataset.append(
   111                                                           HDF5Dataset.empty(file_path=temp_prg_path,
   112                                                                             data_shape=(sub_features, ),
   113                                                                             targets_shape=(),
   114                                                                             dtype=np.int64))
   115                                               else:
   116         2       4319.0   2159.5      0.0          src_path = "{}/SVM_{}_{}_{}-{}.hdf5".format(folder_path, examples,
   117         1        541.0    541.0      0.0                                                      features, global_rank,
   118         1        150.0    150.0      0.0                                                      nodes)
   119         1    1095779.0    1e+06      0.0          src_dataset = HDF5Dataset(file_path=src_path)
   120         1        441.0    441.0      0.0          tgt_folder_path = folder_path + "/tgt"
   121         2       2384.0   1192.0      0.0          tgt_path = "{}/SVM_{}_{}_{}-{}_tgt.hdf5".format(
   122         1        240.0    240.0      0.0              tgt_folder_path, examples, features, global_rank, nodes)
   123         2   23015506.0    1e+07      0.1          tgt_dataset = HDF5Dataset.empty(file_path=tgt_path,
   124         1        220.0    220.0      0.0                                          data_shape=(features, ),
   125         1        170.0    170.0      0.0                                          targets_shape=(),
   126         1       1333.0   1333.0      0.0                                          dtype=np.int64)
   127         1     514265.0 514265.0      0.0          node = Node(src_dataset, tgt_dataset, global_comm, client_comm)
   128                                           
   129                                               # print("start test...")
   130         1       5551.0   5551.0      0.0      timer.set_time_point("start_test")
   131         2      13305.0   6652.5      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   132         1      17875.0  17875.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   133         1       6843.0   6843.0      0.0          node.getTotalDataRecv()))
   134                                               
   135                                               # random permute
   136         1        400.0    400.0      0.0      if is_server:
   137                                                   permutes =[]
   138                                                   for _ in range(client_size):
   139                                                       all_indices = list(range(sub_examples))
   140                                                       random.shuffle(all_indices)
   141                                                       permutes.append(all_indices)
   142                                                   # print(random_permutes)
   143                                               else:
   144         1        221.0    221.0      0.0          pass
   145                                           
   146                                               # sys.exit()
   147                                           
   148                                               # share_tras
   149         1        321.0    321.0      0.0      if is_server:
   150                                                   all_deltas = [[] for _ in range(client_size)]
   151                                           
   152                                                   def STsend_thread(rank):
   153                                                   # for rank in range(client_size):
   154                                                       for j in range(client_size):
   155                                                           if rank == j:
   156                                                               all_deltas[rank].append(None)
   157                                                               continue
   158                                                           delta = np.empty((sub_examples, n), dtype=object)
   159                                                           for k in range(n):
   160                                                               _delta = node.STsend(size=sub_examples,
   161                                                                                    permute=permutes[j],
   162                                                                                    recver=rank,
   163                                                                                    tag=j + k * 100,
   164                                                                                    Sip="127.0.0.1:12233")
   165                                                               delta[:, k] = _delta
   166                                                           all_deltas[rank].append(delta)
   167                                           
   168                                                   with ThreadPoolExecutor(max_workers=client_size) as executor:
   169                                                       executor.map(STsend_thread, range(client_size))
   170                                               else:
   171         1        441.0    441.0      0.0          a_s = []
   172         1        320.0    320.0      0.0          b_s = []
   173         4       3888.0    972.0      0.0          for rank in range(client_size):
   174         3       2165.0    721.7      0.0              if client_rank == rank:
   175         1       1042.0   1042.0      0.0                  a_s.append(None)
   176         1        330.0    330.0      0.0                  b_s.append(None)
   177         1        301.0    301.0      0.0                  continue
   178         2      33434.0  16717.0      0.0              a = np.empty((sub_examples, n), dtype=object)
   179         2      21912.0  10956.0      0.0              b = np.empty((sub_examples, n), dtype=object)
   180         4       5470.0   1367.5      0.0              for k in range(n):
   181         4  856601860.0    2e+08      2.1                  _a, _b = node.STrecv(size=sub_examples,
   182         2        660.0    330.0      0.0                                       sender=server_rank,
   183         2       1603.0    801.5      0.0                                       tag=rank + k * 100,
   184         2        421.0    210.5      0.0                                       Sip="127.0.0.1:12233")
   185         2      37932.0  18966.0      0.0                  a[:, k] = _a
   186         2      27052.0  13526.0      0.0                  b[:, k] = _b
   187         2       2224.0   1112.0      0.0              a_s.append(a)
   188         2       3106.0   1553.0      0.0              b_s.append(b)
   189                                           
   190         1       7865.0   7865.0      0.0      timer.set_time_point("share_tras")
   191         2      17182.0   8591.0      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   192         1      30918.0  30918.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   193         1       8196.0   8196.0      0.0          node.getTotalDataRecv()))
   194                                               
   195                                               # sys.exit()    
   196                                           
   197                                               #* encrypted ID
   198         1        571.0    571.0      0.0      if is_server:
   199                                                   id_enc = None
   200                                               else:
   201         1       7614.0   7614.0      0.0          prf = PRF(secret_key=secret_key)
   202         1   18243199.0    2e+07      0.0          id_enc = np.vectorize(prf.compute)(node.src_dataset.ids[...])
   203         1  441539191.0    4e+08      1.1      id_enc_gather = node.gather(id_enc, server_rank)
   204                                           
   205                                               #* server-aid PSI
   206         1        702.0    702.0      0.0      if is_server:
   207                                                   final_permutes, permute_length = node.find_intersection_indices(
   208                                                       id_enc_gather[:-1])
   209                                               else:
   210         1        531.0    531.0      0.0          pass
   211                                               # sys.exit()
   212                                           
   213                                               #* find permute
   214         1        912.0    912.0      0.0      if is_server:
   215                                                   def find_permute(permute, final_permute):
   216                                                       pre_permute = [0] * len(all_indices)
   217                                                       for i in range(len(all_indices)):
   218                                                           pre_permute[permute[i]] = final_permute[i]
   219                                                       return pre_permute
   220                                                   pre_permutes = []
   221                                                   for i in range(client_size):
   222                                                       pre_permutes.append(find_permute(permutes[i], final_permutes[i]))
   223                                                   pre_permutes.append(None)
   224                                           
   225                                                   node.scatter(pre_permutes, server_rank)
   226                                               else:
   227         1  919954480.0    9e+08      2.3          pre_permute = node.scatter(None, server_rank)
   228                                           
   229                                               # sys.exit()
   230                                           
   231                                               #* seeds generation
   232         1        360.0    360.0      0.0      if is_server:
   233                                                   pass
   234                                               else:
   235         2   13224057.0    7e+06      0.0          seeds = [(None if i == client_rank else np.array(
   236                                                       [[k + j * 10 + i * 100 + client_rank * 1000 for k in range(n)]
   237                                                        for j in range(sub_examples)]))
   238         1       2094.0   2094.0      0.0                   for i in range(client_size)]  #! test
   239                                                   
   240                                                   # seeds = [(None if i == client_rank else SHPRG.genMatrixAES128(seed=token_bytes(16),n=sub_examples,m=n,EQ=EQ) ) for i in range(client_size)]
   241                                           
   242         1       5250.0   5250.0      0.0      timer.set_time_point("server_psi")
   243         2      13575.0   6787.5      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   244         1      31910.0  31910.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   245         1       5991.0   5991.0      0.0          node.getTotalDataRecv()))
   246                                               
   247                                               # sys.exit()
   248                                           
   249                                               # seeds share
   250         1        440.0    440.0      0.0      if is_server:
   251                                                   pass
   252                                               else:
   253         1   13238906.0    1e+07      0.0          seeds_exchanged = node.alltoall(seeds, in_clients=True)
   254                                           
   255         1       3326.0   3326.0      0.0      timer.set_time_point("seed_share")
   256         2       5381.0   2690.5      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   257         1      13295.0  13295.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   258         1       5431.0   5431.0      0.0          node.getTotalDataRecv()))
   259                                           
   260                                           
   261                                               # permute and share
   262         1        331.0    331.0      0.0      if is_server:
   263                                                   seeds_exchanged = None
   264                                               else:
   265         4       2364.0    591.0      0.0          for i in range(client_size):
   266         3       1162.0    387.3      0.0              if client_rank == i:
   267         1        171.0    171.0      0.0                  continue
   268         2     760147.0 380073.5      0.0              seeds_exchanged[i] = (seeds_exchanged[i] - a_s[i]) % q
   269         1    1744929.0    2e+06      0.0      seeds_share_gather = node.gather(seeds_exchanged, server_rank)
   270                                           
   271         1        511.0    511.0      0.0      if is_server:
   272                                                   for i in range(client_size):
   273                                                       for rank in range(client_size):
   274                                                           if i == rank:
   275                                                               continue
   276                                                           seeds_share_gather[i][rank] = (
   277                                                               seeds_share_gather[i][rank][permutes[rank]] +
   278                                                               all_deltas[i][rank]) % q
   279                                                   seed1s_s = seeds_share_gather
   280                                               else:
   281         1        150.0    150.0      0.0          seed2s = b_s
   282                                           
   283         1       1903.0   1903.0      0.0      timer.set_time_point("perm_share")
   284         2       5360.0   2680.0      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   285         1      12063.0  12063.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   286         1       6522.0   6522.0      0.0          node.getTotalDataRecv()))
   287                                               
   288                                           
   289                                               # share intersection size
   290         1        491.0    491.0      0.0      if is_server:
   291                                                   pass
   292                                               else:
   293         1        200.0    200.0      0.0          permute_length = None
   294         1    8901856.0    9e+06      0.0      permute_length = global_comm.bcast(permute_length, root=server_rank)
   295                                           
   296                                           
   297                                               #* share
   298         2       1744.0    872.0      0.0      round_examples = sub_examples // chunk + (1 if sub_examples % chunk != 0
   299         1        150.0    150.0      0.0                                                else 0)
   300         1       1112.0   1112.0      0.0      round_inter = permute_length // chunk + (1 if permute_length % chunk != 0
   301                                                                                       else 0)
   302         1        852.0    852.0      0.0      if is_server:
   303                                                   def sharesend_thread(rank):
   304                                                       for i in range(round_examples):
   305                                                           recv = node.recv(source=rank, tag=i)
   306                                                           temp_dataset[rank].add(data=recv[0], targets=recv[1])
   307                                                   
   308                                                   def tgt_dataset_send(rank):
   309                                                       with_targets = (rank == targets_rank)
   310                                           
   311                                                       data_to_client = np.empty((chunk, sub_features), dtype=np.int64)
   312                                                       targets_to_client = np.empty(
   313                                                           (chunk,
   314                                                            target_length), dtype=np.int64) if with_targets else None
   315                                                       index = 0
   316                                           
   317                                                       for i in range(round_inter):
   318                                                           rest = min(permute_length - index, chunk)
   319                                                           for k in range(client_size):
   320                                                               if k == rank:
   321                                                                   continue
   322                                                               output_prg = mod_range(
   323                                                                   shprg.genRandom(seed1s_s[k][rank][index:index + rest]),
   324                                                                   p).astype(np.int64)
   325                                                               data_to_client[:rest] += output_prg[:, :sub_features]
   326                                                               if with_targets:
   327                                                                   targets_to_client[:rest] += output_prg[:, sub_features:sub_features+target_length]
   328                                                           index += rest
   329                                                           if target_length == 1:
   330                                                               temp_prg_dataset[rank].add(data=data_to_client[:rest],
   331                                                                                targets=targets_to_client[:rest].ravel() if with_targets else None)
   332                                                               continue
   333                                                           temp_prg_dataset[rank].add(data=data_to_client[:rest],
   334                                                                               targets=targets_to_client[:rest] if with_targets else None)
   335                                           
   336                                                   with ThreadPoolExecutor(max_workers=client_size+client_size) as executor:
   337                                                       executor.map(sharesend_thread, range(client_size))
   338                                                       executor.map(tgt_dataset_send, range(client_size))
   339                                               else:
   340         1       1152.0   1152.0      0.0          with_targets = node.src_dataset.with_targets
   341                                           
   342         1       5941.0   5941.0      0.0          data_to_server = np.empty((chunk, sub_features), dtype=np.int64)
   343         2       2315.0   1157.5      0.0          targets_to_server = np.empty(
   344         2        662.0    331.0      0.0              (chunk, target_length), dtype=np.int64) if with_targets else None
   345         1        391.0    391.0      0.0          index = 0
   346                                           
   347        51      57052.0   1118.7      0.0          for i in range(round_examples):
   348        50     190125.0   3802.5      0.0              rest = min(sub_examples - index, chunk)
   349      5050    1930754.0    382.3      0.0              for j in range(rest):
   350      5000    2331597.0    466.3      0.0                  perm_index = pre_permute[index + j]
   351      5000  634619219.0 126923.8      1.6                  data_to_server[j] = encoder.encode(node.src_dataset.data[perm_index])
   352      5000    1736271.0    347.3      0.0                  if with_targets:
   353      5000  186349733.0  37269.9      0.5                      targets_to_server[j] = encoder.encode(node.src_dataset.targets[perm_index].reshape((1, target_length)))
   354       200     250289.0   1251.4      0.0              for k in range(client_size):
   355       150     101302.0    675.3      0.0                  if k == client_rank:
   356        50       9904.0    198.1      0.0                      continue
   357       300 1186317608.0    4e+06      2.9                  output_prg = mod_range(
   358       100 5596131019.0    6e+07     13.8                      shprg.genRandom(seeds[k][index:index + rest]),
   359       200  854513746.0    4e+06      2.1                      p).astype(np.int64)
   360       100   27963462.0 279634.6      0.1                  data_to_server[:rest] -= output_prg[:, :sub_features]
   361       100      83596.0    836.0      0.0                  if with_targets:
   362       200     737962.0   3689.8      0.0                      targets_to_server[:rest] -= output_prg[:, sub_features:sub_features +
   363       100      28756.0    287.6      0.0                                           target_length]
   364        50      54682.0   1093.6      0.0              index += rest
   365        50      45482.0    909.6      0.0              if target_length == 1:
   366       100        1e+10    1e+08     31.4                  node.send(
   367       100     233596.0   2336.0      0.0                      (data_to_server[:rest], targets_to_server[:rest].ravel()
   368        50       8069.0    161.4      0.0                       if with_targets else None),
   369        50      19298.0    386.0      0.0                      dest=server_rank,
   370        50      12765.0    255.3      0.0                      tag=i)
   371        50      68664.0   1373.3      0.0                  continue
   372                                                       node.send((data_to_server[:rest],
   373                                                                  targets_to_server[:rest] if with_targets else None),
   374                                                                 dest=server_rank,
   375                                                                 tag=i)
   376                                           
   377         1       7414.0   7414.0      0.0      timer.set_time_point("dset_share")
   378         2      16060.0   8030.0      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   379         1      35777.0  35777.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   380         1      10960.0  10960.0      0.0          node.getTotalDataRecv()))
   381                                                   
   382                                               
   383                                               # tgt dataset server send
   384                                           
   385         1       1122.0   1122.0      0.0      if is_server:
   386                                                   def tgt_dataset_send(rank):
   387                                                   # for rank in range(client_size):
   388                                                       with_targets = (rank == targets_rank)
   389                                           
   390                                                       data_to_client = np.empty((chunk, sub_features), dtype=np.int64)
   391                                                       targets_to_client = np.empty(
   392                                                           (chunk,
   393                                                            target_length), dtype=np.int64) if with_targets else None
   394                                                       index = [0]*client_size
   395                                           
   396                                                       for i in range(round_inter):
   397                                                           rest = min(permute_length - index[rank], chunk)
   398                                                           for j in range(rest):
   399                                                               perm_index = permutes[rank][index[rank] + j]
   400                                                               data_to_client[j] = temp_dataset[rank].data[perm_index]
   401                                                               if with_targets:
   402                                                                   targets_to_client[j] = temp_dataset[rank].targets[
   403                                                                       perm_index].reshape((1, target_length))
   404                                                           for k in range(client_size):
   405                                                               if k == rank:
   406                                                                   continue
   407                                                               data_to_client[:rest] += temp_prg_dataset[rank].data[index[rank]:index[rank] + rest]
   408                                                               if with_targets:
   409                                                                   targets_to_client[:rest] += temp_prg_dataset[rank].targets[index[rank]:index[rank] + rest].reshape((rest, target_length))
   410                                                           index[rank] += rest
   411                                                           if target_length == 1:
   412                                                               node.send(
   413                                                                   (data_to_client[:rest], targets_to_client[:rest].ravel()
   414                                                                   if with_targets else None),
   415                                                                   dest=rank,
   416                                                                   tag=i)
   417                                                               continue
   418                                                           node.send(
   419                                                               (data_to_client[:rest],
   420                                                                   targets_to_client[:rest] if with_targets else None),
   421                                                               dest=rank,
   422                                                               tag=i)
   423                                                           
   424                                           
   425                                                   with ThreadPoolExecutor(max_workers=client_size) as executor:
   426                                                       executor.map(tgt_dataset_send, range(client_size))
   427                                               else:
   428         1       1874.0   1874.0      0.0          index = [0] * client_size
   429         1      31570.0  31570.0      0.0          data = np.empty((chunk, features), dtype=np.int64)
   430         1       1663.0   1663.0      0.0          targets = np.empty((chunk,target_length), dtype=np.int64)
   431        36      27223.0    756.2      0.0          for i in range(round_inter):
   432        35 8614329640.0    2e+08     21.3              recv = node.recv(source=server_rank, tag=i)
   433        35      46027.0   1315.1      0.0              rest = len(recv[0])
   434       140     127395.0    910.0      0.0              for rank in range(client_size):
   435       105      44509.0    423.9      0.0                  if client_rank == rank:
   436        70    4893796.0  69911.4      0.0                      data[:rest, rank * sub_features:(rank + 1) *
   437        70      16452.0    235.0      0.0                           sub_features] = recv[0]
   438        35      17262.0    493.2      0.0                      if rank == targets_rank:
   439        35     126899.0   3625.7      0.0                          targets[:rest]= recv[1].reshape((rest, target_length))
   440        35      10802.0    308.6      0.0                      continue
   441       210  786756654.0    4e+06      1.9                  output_prg = mod_range(
   442        70 5890276001.0    8e+07     14.6                      shprg.genRandom(seed2s[rank][index[rank]:index[rank] + rest]),
   443       140  541857527.0    4e+06      1.3                        p).astype(np.int64)
   444       140   13343367.0  95309.8      0.0                  data[:rest, rank * sub_features:(rank + 1) *
   445       140     643512.0   4596.5      0.0                       sub_features] = output_prg[:, :sub_features]
   446        70     111710.0   1595.9      0.0                  if rank == targets_rank:
   447                                                               targets[:rest] = output_prg[:, sub_features:sub_features+target_length]
   448        70     174972.0   2499.6      0.0                  index[rank] += rest
   449        35      17653.0    504.4      0.0              if target_length == 1:
   450        70  179032469.0    3e+06      0.4                  node.tgt_dataset.add(data=data[:rest],
   451        35     116990.0   3342.6      0.0                                       targets=targets[:rest].ravel())
   452        35      27635.0    789.6      0.0                  continue
   453                                                       node.tgt_dataset.add(data=data[:rest], targets=targets[:rest])
   454                                           
   455         1       5030.0   5030.0      0.0      timer.set_time_point("tgt_final ")
   456         2      12925.0   6462.5      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   457         1      32491.0  32491.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   458         1       5520.0   5520.0      0.0          node.getTotalDataRecv()))
   459         1       1373.0   1373.0      0.0      print("intersection size:{}".format(permute_length))
   460         1      22131.0  22131.0      0.0      print(timer)
   461                                           
   462         1      31900.0  31900.0      0.0      file.close()

