Timer unit: 1e-09 s

Total time: 1.31082 s
File: /home/ubuntu/mSAID/main2.py
Function: main at line 42

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    42                                           def main():
    43                                               # dataset
    44         1       1443.0   1443.0      0.0      arguments = sys.argv[1:]
    45         1        942.0    942.0      0.0      examples = int(arguments[0])
    46         1        441.0    441.0      0.0      features = int(arguments[1])
    47         1        270.0    270.0      0.0      chunk = 100
    48                                               # sub_dataset
    49         1       7604.0   7604.0      0.0      nodes = MPI.COMM_WORLD.Get_size() - 1
    50         1        481.0    481.0      0.0      sub_examples = examples * 5 // 6
    51         1        211.0    211.0      0.0      sub_features = features // nodes
    52         1        180.0    180.0      0.0      targets_rank = 0
    53         1        150.0    150.0      0.0      target_length = 1
    54         1       1342.0   1342.0      0.0      folder_path = "./data/SVM_{}_{}".format(examples, features)
    55                                           
    56         1      26369.0  26369.0      0.0      file = open("./data/log/SVM_{}_{}_log_{}.txt".format(examples, features,nodes), 'a')
    57         1        611.0    611.0      0.0      sys.stdout = file
    58         1        521.0    521.0      0.0      sys.stdout = sys.__stdout__
    59                                           
    60         1        190.0    190.0      0.0      secret_key = "secret_key"
    61                                           
    62                                               # shprg
    63         1        200.0    200.0      0.0      n = 1
    64         1        351.0    351.0      0.0      m = sub_features + target_length
    65         1        211.0    211.0      0.0      EQ = 128
    66         1        140.0    140.0      0.0      EP = 64
    67         1       1102.0   1102.0      0.0      q = 2**EQ
    68         1        592.0    592.0      0.0      p = 2**EP
    69         1       4930.0   4930.0      0.0      seedA = bytes(0x355678)
    70                                           
    71         1        200.0    200.0      0.0      precision_bits = 16
    72         1       2294.0   2294.0      0.0      encoder = FixedPointEncoder(precision_bits=precision_bits)
    73                                           
    74         1   45527588.0    5e+07      3.5      shprg = SHPRG(input=n, output=m, EQ=EQ, EP=EP, seedA=seedA)
    75                                           
    76         1       1583.0   1583.0      0.0      global_comm = MPI.COMM_WORLD
    77         1       3847.0   3847.0      0.0      global_rank = global_comm.Get_rank()
    78         1       1603.0   1603.0      0.0      global_size = global_comm.Get_size()
    79                                           
    80         1      11141.0  11141.0      0.0      global_grp = global_comm.Get_group()
    81         1       4869.0   4869.0      0.0      client_grp = global_grp.Excl([global_size - 1])
    82         1  717404196.0    7e+08     54.7      client_comm = global_comm.Create(client_grp)
    83         1       5240.0   5240.0      0.0      client_rank = None if client_comm == MPI.COMM_NULL else client_comm.Get_rank(
    84                                               )
    85         1       1913.0   1913.0      0.0      client_size = client_grp.Get_size()
    86                                           
    87         1        691.0    691.0      0.0      is_server = False
    88         1        852.0    852.0      0.0      if global_rank == global_size - 1:
    89                                                   is_server = True
    90         1        311.0    311.0      0.0      server_rank = global_size - 1
    91                                           
    92         1       5952.0   5952.0      0.0      timer = Timer()
    93                                           
    94                                               #* initial node
    95         1        772.0    772.0      0.0      if is_server:
    96                                                   node = Node(None, None, global_comm, client_comm)
    97                                                   temp_dataset = []
    98                                                   temp_folder_path = folder_path + "/temp"
    99                                                   for i in range(client_size):
   100                                                       temp_path = "{}/SVM_{}_{}_{}-{}_temp.hdf5".format(
   101                                                           temp_folder_path, examples, features, i, nodes)
   102                                                       temp_dataset.append(
   103                                                           HDF5Dataset.empty(file_path=temp_path,
   104                                                                             data_shape=(sub_features, ),
   105                                                                             targets_shape=(),
   106                                                                             dtype=np.int64))
   107                                               else:
   108         2       3617.0   1808.5      0.0          src_path = "{}/SVM_{}_{}_{}-{}.hdf5".format(folder_path, examples,
   109         1        541.0    541.0      0.0                                                      features, global_rank,
   110         1        120.0    120.0      0.0                                                      nodes)
   111         1    1080756.0    1e+06      0.1          src_dataset = HDF5Dataset(file_path=src_path)
   112         1        511.0    511.0      0.0          tgt_folder_path = folder_path + "/tgt"
   113         2       2045.0   1022.5      0.0          tgt_path = "{}/SVM_{}_{}_{}-{}_tgt.hdf5".format(
   114         1        231.0    231.0      0.0              tgt_folder_path, examples, features, global_rank, nodes)
   115         2    1632703.0 816351.5      0.1          tgt_dataset = HDF5Dataset.empty(file_path=tgt_path,
   116         1        190.0    190.0      0.0                                          data_shape=(features, ),
   117         1        171.0    171.0      0.0                                          targets_shape=(),
   118         1       1724.0   1724.0      0.0                                          dtype=np.int64)
   119         1     476905.0 476905.0      0.0          node = Node(src_dataset, tgt_dataset, global_comm, client_comm)
   120                                           
   121                                               # print("start test...")
   122         1       6001.0   6001.0      0.0      timer.set_time_point("start_test")
   123         2      14868.0   7434.0      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   124         1      17303.0  17303.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   125         1       8426.0   8426.0      0.0          node.getTotalDataRecv()))
   126                                               
   127                                               # random perm
   128         1        431.0    431.0      0.0      if is_server:
   129                                                   permutes =[]
   130                                                   for _ in range(client_size):
   131                                                       all_indices = list(range(sub_examples))
   132                                                       random.shuffle(all_indices)
   133                                                       permutes.append(all_indices)
   134                                                   # print(random_permutes)
   135                                               else:
   136         1        211.0    211.0      0.0          pass
   137                                           
   138                                               # sys.exit()
   139                                           
   140                                               # share_tras
   141         1        341.0    341.0      0.0      if is_server:
   142                                                   all_deltas = [[] for _ in range(client_size)]
   143                                           
   144                                                   def STsend_thread(rank):
   145                                                   # for rank in range(client_size):
   146                                                       for j in range(client_size):
   147                                                           if rank == j:
   148                                                               all_deltas[rank].append(None)
   149                                                               continue
   150                                                           delta = np.empty((sub_examples, n), dtype=object)
   151                                                           for k in range(n):
   152                                                               _delta = node.STsend(size=sub_examples,
   153                                                                                    permute=permutes[j],
   154                                                                                    recver=rank,
   155                                                                                    tag=j + k * 100,
   156                                                                                    Sip="127.0.0.1:12233")
   157                                                               delta[:, k] = _delta
   158                                                           all_deltas[rank].append(delta)
   159                                           
   160                                                   with ThreadPoolExecutor(max_workers=client_size) as executor:
   161                                                       executor.map(STsend_thread, range(client_size))
   162                                               else:
   163         1        311.0    311.0      0.0          a_s = []
   164         1        220.0    220.0      0.0          b_s = []
   165         4       3818.0    954.5      0.0          for rank in range(client_size):
   166         3       2254.0    751.3      0.0              if client_rank == rank:
   167         1        641.0    641.0      0.0                  a_s.append(None)
   168         1        531.0    531.0      0.0                  b_s.append(None)
   169         1        241.0    241.0      0.0                  continue
   170         2      10760.0   5380.0      0.0              a = np.empty((sub_examples, n), dtype=object)
   171         2       2315.0   1157.5      0.0              b = np.empty((sub_examples, n), dtype=object)
   172         4       4709.0   1177.2      0.0              for k in range(n):
   173         4  538564082.0    1e+08     41.1                  _a, _b = node.STrecv(size=sub_examples,
   174         2        581.0    290.5      0.0                                       sender=server_rank,
   175         2       1343.0    671.5      0.0                                       tag=rank + k * 100,
   176         2        432.0    216.0      0.0                                       Sip="127.0.0.1:12233")
   177         2      12233.0   6116.5      0.0                  a[:, k] = _a
   178         2       3496.0   1748.0      0.0                  b[:, k] = _b
   179         2       2515.0   1257.5      0.0              a_s.append(a)
   180         2       1383.0    691.5      0.0              b_s.append(b)
   181                                           
   182         1       7013.0   7013.0      0.0      timer.set_time_point("share_tras")
   183         2      15158.0   7579.0      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   184         1      22412.0  22412.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   185         1       7525.0   7525.0      0.0          node.getTotalDataRecv()))
   186                                               
   187                                               # sys.exit()
   188                                               
   189                                           
   190                                               #* encrypted ID
   191         1        651.0    651.0      0.0      if is_server:
   192                                                   id_enc = None
   193                                               else:
   194         1      10620.0  10620.0      0.0          prf = PRF(secret_key=secret_key)
   195         1     332674.0 332674.0      0.0          id_enc = np.vectorize(prf.compute)(node.src_dataset.ids[...])
   196         1     118051.0 118051.0      0.0      id_enc_gather = node.gather(id_enc, server_rank)
   197                                           
   198                                               #* server-aid PSI
   199         1        341.0    341.0      0.0      if is_server:
   200                                                   final_permutes, permute_length = node.find_intersection_indices(
   201                                                       id_enc_gather[:-1])
   202                                               else:
   203         1        240.0    240.0      0.0          pass
   204                                               # sys.exit()
   205                                           
   206                                               #* permute share
   207         1        281.0    281.0      0.0      if is_server:
   208                                                   def find_permute(permute, final_permute):
   209                                                       pre_permute = [0] * len(all_indices)
   210                                                       for i in range(len(all_indices)):
   211                                                           pre_permute[permute[i]] = final_permute[i]
   212                                                       return pre_permute
   213                                                   pre_permutes = []
   214                                                   for i in range(client_size):
   215                                                       pre_permutes.append(find_permute(permutes[i], final_permutes[i]))
   216                                                   pre_permutes.append(None)
   217                                           
   218                                                   print(pre_permutes)
   219                                                   node.scatter(pre_permutes, server_rank)
   220                                               else:
   221         1     632988.0 632988.0      0.0          pre_permute = node.scatter(None, server_rank)
   222         1       3918.0   3918.0      0.0          print(pre_permute)
   223                                           
   224                                               # sys.exit()
   225                                           
   226                                               #* seeds generation
   227         1        270.0    270.0      0.0      if is_server:
   228                                                   pass
   229                                               else:
   230         2      34534.0  17267.0      0.0          seeds = [(None if i == client_rank else np.array(
   231                                                       [[k + j * 10 + i * 100 + client_rank * 1000 for k in range(n)]
   232                                                        for j in range(sub_examples)]))
   233         1        672.0    672.0      0.0                   for i in range(client_size)]  #! test
   234                                                   
   235                                                   # seeds = [(None if i == client_rank else SHPRG.genMatrixAES128(seed=token_bytes(16),n=sub_examples,m=n,EQ=EQ) ) for i in range(client_size)]
   236                                           
   237         1       2164.0   2164.0      0.0      timer.set_time_point("server_psi")
   238         2       4367.0   2183.5      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   239         1      14217.0  14217.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   240         1       7134.0   7134.0      0.0          node.getTotalDataRecv()))
   241                                               
   242                                               # sys.exit()
   243                                           
   244                                               #* share
   245         1       1002.0   1002.0      0.0      round_examples = sub_examples // chunk + (1 if sub_examples % chunk != 0
   246                                                                                         else 0)
   247         1        301.0    301.0      0.0      if is_server:
   248                                                   def sharesend_thread(rank):
   249                                                       for i in range(round_examples):
   250                                                           recv = node.recv(source=rank, tag=i)
   251                                                           temp_dataset[rank].add(data=recv[0], targets=recv[1])
   252                                           
   253                                                   with ThreadPoolExecutor(max_workers=client_size) as executor:
   254                                                       executor.map(sharesend_thread, range(client_size))
   255                                               else:
   256         1        441.0    441.0      0.0          with_targets = node.src_dataset.with_targets
   257                                           
   258         1       4058.0   4058.0      0.0          data_to_server = np.empty((chunk, sub_features), dtype=np.int64)
   259         2        481.0    240.5      0.0          targets_to_server = np.empty(
   260         2        531.0    265.5      0.0              (chunk, target_length), dtype=np.int64) if with_targets else None
   261         1        201.0    201.0      0.0          index = 0
   262                                           
   263         2       1142.0    571.0      0.0          for i in range(round_examples):
   264         1       1723.0   1723.0      0.0              rest = min(sub_examples - index, chunk)
   265         6       2314.0    385.7      0.0              for j in range(rest):
   266         5       2404.0    480.8      0.0                  perm_index = pre_permute[index + j]
   267         5     327365.0  65473.0      0.0                  data_to_server[j] = encoder.encode(node.src_dataset.data[perm_index])
   268         5       1945.0    389.0      0.0                  if with_targets:
   269                                                               targets_to_server[j] = encoder.encode(node.src_dataset.targets[perm_index].reshape((1, target_length)))
   270         4       1865.0    466.2      0.0              for k in range(client_size):
   271         3       1243.0    414.3      0.0                  if k == client_rank:
   272         1        190.0    190.0      0.0                      continue
   273         6      48972.0   8162.0      0.0                  output_prg = mod_range(
   274         2     159959.0  79979.5      0.0                      shprg.genRandom(seeds[k][index:index + rest]),
   275         4      17542.0   4385.5      0.0                      p).astype(np.int64)
   276         2      20838.0  10419.0      0.0                  data_to_server[:rest] -= output_prg[:, :sub_features]
   277         2        902.0    451.0      0.0                  if with_targets:
   278                                                               targets_to_server[:rest] -= output_prg[:, sub_features:sub_features +
   279                                                                                    target_length]
   280         1        360.0    360.0      0.0              index += rest
   281         1        311.0    311.0      0.0              if target_length == 1:
   282         2      71424.0  35712.0      0.0                  node.send(
   283         3       1203.0    401.0      0.0                      (data_to_server[:rest], targets_to_server[:rest].ravel()
   284         2        391.0    195.5      0.0                       if with_targets else None),
   285         1        150.0    150.0      0.0                      dest=server_rank,
   286         1        150.0    150.0      0.0                      tag=i)
   287         1        381.0    381.0      0.0                  continue
   288                                                       node.send((data_to_server[:rest],
   289                                                                  targets_to_server[:rest] if with_targets else None),
   290                                                                 dest=server_rank,
   291                                                                 tag=i)
   292                                           
   293         1       2054.0   2054.0      0.0      timer.set_time_point("dset_share")
   294         2       5140.0   2570.0      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   295         1      14187.0  14187.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   296         1       6973.0   6973.0      0.0          node.getTotalDataRecv()))
   297                                               
   298                                               # sys.exit()
   299                                           
   300                                               # seeds share
   301         1        301.0    301.0      0.0      if is_server:
   302                                                   pass
   303                                               else:
   304         1     273293.0 273293.0      0.0          seeds_exchanged = node.alltoall(seeds, in_clients=True)
   305                                           
   306         1       1863.0   1863.0      0.0      timer.set_time_point("seed_share")
   307         2       4548.0   2274.0      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   308         1      12033.0  12033.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   309         1       6883.0   6883.0      0.0          node.getTotalDataRecv()))
   310                                           
   311                                           
   312                                               # permute and share
   313         1        260.0    260.0      0.0      if is_server:
   314                                                   seeds_exchanged = None
   315                                               else:
   316         4       2075.0    518.8      0.0          for i in range(client_size):
   317         3       1120.0    373.3      0.0              if client_rank == i:
   318         1        221.0    221.0      0.0                  continue
   319         2      31609.0  15804.5      0.0              seeds_exchanged[i] = (seeds_exchanged[i] - a_s[i]) % q
   320         1      59912.0  59912.0      0.0      seeds_share_gather = node.gather(seeds_exchanged, server_rank)
   321                                           
   322         1        340.0    340.0      0.0      if is_server:
   323                                                   for i in range(client_size):
   324                                                       for rank in range(client_size):
   325                                                           if i == rank:
   326                                                               continue
   327                                                           seeds_share_gather[i][rank] = (
   328                                                               seeds_share_gather[i][rank][permutes[rank]] +
   329                                                               all_deltas[i][rank]) % q
   330                                                   seed1s_s = seeds_share_gather
   331                                               else:
   332         1        231.0    231.0      0.0          seed2s = b_s
   333                                           
   334         1       2063.0   2063.0      0.0      timer.set_time_point("perm_share")
   335         2       3828.0   1914.0      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   336         1      10449.0  10449.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   337         1       6813.0   6813.0      0.0          node.getTotalDataRecv()))
   338                                           
   339                                               # share intersection size
   340         1        240.0    240.0      0.0      if is_server:
   341                                                   pass
   342                                               else:
   343         1        281.0    281.0      0.0          permute_length = None
   344         1    1226099.0    1e+06      0.1      permute_length = global_comm.bcast(permute_length, root=server_rank)
   345                                           
   346                                               # sys.exit()
   347                                           
   348                                               # tgt dataset server send
   349         1       1052.0   1052.0      0.0      round_inter = permute_length // chunk + (1 if permute_length % chunk != 0
   350                                                                                        else 0)
   351         1        300.0    300.0      0.0      if is_server:
   352                                                   def tgt_dataset_send(rank):
   353                                                   # for rank in range(client_size):
   354                                                       with_targets = (rank == targets_rank)
   355                                           
   356                                                       data_to_client = np.empty((chunk, sub_features), dtype=np.int64)
   357                                                       targets_to_client = np.empty(
   358                                                           (chunk,
   359                                                            target_length), dtype=np.int64) if with_targets else None
   360                                                       index = 0
   361                                           
   362                                                       for i in range(round_inter):
   363                                                           rest = min(permute_length - index, chunk)
   364                                                           for j in range(rest):
   365                                                               perm_index = permutes[rank][index + j]
   366                                                               data_to_client[j] = temp_dataset[rank].data[perm_index]
   367                                                               if with_targets:
   368                                                                   targets_to_client[j] = temp_dataset[rank].targets[
   369                                                                       perm_index].reshape((1, target_length))
   370                                                           for k in range(client_size):
   371                                                               if k == rank:
   372                                                                   continue
   373                                                               output_prg = mod_range(
   374                                                                   shprg.genRandom(seed1s_s[k][rank][index:index + rest]),
   375                                                                   p).astype(np.int64)
   376                                                               data_to_client[:rest] += output_prg[:, :sub_features]
   377                                                               if with_targets:
   378                                                                   targets_to_client[:rest] += output_prg[:, sub_features:sub_features+target_length]
   379                                                           index += rest
   380                                                           if target_length == 1:
   381                                                               node.send(
   382                                                                   (data_to_client[:rest], targets_to_client[:rest].ravel()
   383                                                                   if with_targets else None),
   384                                                                   dest=rank,
   385                                                                   tag=i)
   386                                                               continue
   387                                                           node.send(
   388                                                               (data_to_client[:rest],
   389                                                                   targets_to_client[:rest] if with_targets else None),
   390                                                               dest=rank,
   391                                                               tag=i)
   392                                           
   393                                                   with ThreadPoolExecutor(max_workers=client_size) as executor:
   394                                                       executor.map(tgt_dataset_send, range(client_size))
   395                                               else:
   396         1        862.0    862.0      0.0          index = [0] * client_size
   397         1       7925.0   7925.0      0.0          data = np.empty((chunk, features), dtype=np.int64)
   398         1       2194.0   2194.0      0.0          targets = np.empty((chunk,target_length), dtype=np.int64)
   399         2       1593.0    796.5      0.0          for i in range(round_inter):
   400         1    1679520.0    2e+06      0.1              recv = node.recv(source=server_rank, tag=i)
   401         1        752.0    752.0      0.0              rest = len(recv[0])
   402                                                       # print(rest)
   403         4       1713.0    428.2      0.0              for rank in range(client_size):
   404         3       1143.0    381.0      0.0                  if client_rank == rank:
   405         2       1723.0    861.5      0.0                      data[:rest, rank * sub_features:(rank + 1) *
   406         2        470.0    235.0      0.0                           sub_features] = recv[0]
   407         1        271.0    271.0      0.0                      if rank == targets_rank:
   408                                                                   targets[:rest]= recv[1].reshape((rest, target_length))
   409         1        241.0    241.0      0.0                      continue
   410         6      33171.0   5528.5      0.0                  output_prg = mod_range(
   411         2     125515.0  62757.5      0.0                      shprg.genRandom(seed2s[rank][index[rank]:index[rank] + rest]),
   412         4      12464.0   3116.0      0.0                        p).astype(np.int64)
   413         4       4990.0   1247.5      0.0                  data[:rest, rank * sub_features:(rank + 1) *
   414         4       2725.0    681.2      0.0                       sub_features] = output_prg[:, :sub_features]
   415         2        792.0    396.0      0.0                  if rank == targets_rank:
   416         1       2244.0   2244.0      0.0                      targets[:rest] = output_prg[:, sub_features:sub_features+target_length]
   417         2       1493.0    746.5      0.0                  index[rank] += rest
   418         1        301.0    301.0      0.0              if target_length == 1:
   419         2     416932.0 208466.0      0.0                  node.tgt_dataset.add(data=data[:rest],
   420         1       2234.0   2234.0      0.0                                       targets=targets[:rest].ravel())
   421         1        400.0    400.0      0.0                  continue
   422                                                       node.tgt_dataset.add(data=data[:rest], targets=targets[:rest])
   423                                           
   424                                                   # print(node.tgt_dataset.targets[1])
   425                                           
   426         1       2555.0   2555.0      0.0      timer.set_time_point("tgt_final ")
   427         2       5220.0   2610.0      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   428         1      15009.0  15009.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   429         1       6903.0   6903.0      0.0          node.getTotalDataRecv()))
   430         1       1653.0   1653.0      0.0      print("intersection size:{}".format(permute_length))
   431         1      21440.0  21440.0      0.0      print(timer)
   432                                           
   433         1      23794.0  23794.0      0.0      file.close()

