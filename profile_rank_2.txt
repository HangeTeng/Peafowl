Timer unit: 1e-09 s

Total time: 1.85844 s
File: /home/mSAID/main3.py
Function: main at line 42

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    42                                           def main():
    43                                               # dataset
    44         1       5000.0   5000.0      0.0      arguments = sys.argv[1:]
    45         1       3700.0   3700.0      0.0      examples = int(arguments[0])
    46         1       2000.0   2000.0      0.0      features = int(arguments[1])
    47         1       1500.0   1500.0      0.0      chunk = 100
    48                                               # sub_dataset
    49         1      20400.0  20400.0      0.0      nodes = MPI.COMM_WORLD.Get_size() - 1
    50         1       1900.0   1900.0      0.0      sub_examples = examples * 5 // 6
    51         1       1400.0   1400.0      0.0      sub_features = features // nodes
    52         1       1200.0   1200.0      0.0      targets_rank = 0
    53         1       1200.0   1200.0      0.0      target_length = 1
    54         1       5100.0   5100.0      0.0      folder_path = "./data/SVM_{}_{}".format(examples, features)
    55                                           
    56         1     804700.0 804700.0      0.0      file = open("./data/log/SVM_{}_{}_log_{}.txt".format(examples, features,nodes), 'a')
    57         1       3100.0   3100.0      0.0      sys.stdout = file
    58         1       2500.0   2500.0      0.0      sys.stdout = sys.__stdout__
    59                                           
    60         1       1400.0   1400.0      0.0      secret_key = "secret_key"
    61                                           
    62                                               # shprg
    63         1       1600.0   1600.0      0.0      n = 2
    64         1       1900.0   1900.0      0.0      m = sub_features + target_length
    65         1       1400.0   1400.0      0.0      EQ = 128
    66         1       1300.0   1300.0      0.0      EP = 64
    67         1       3800.0   3800.0      0.0      q = 2**EQ
    68         1       2100.0   2100.0      0.0      p = 2**EP
    69         1      22700.0  22700.0      0.0      seedA = bytes(0x355678)
    70                                           
    71         1       1500.0   1500.0      0.0      precision_bits = 16
    72         1      12700.0  12700.0      0.0      encoder = FixedPointEncoder(precision_bits=precision_bits)
    73                                           
    74         1  160506600.0    2e+08      8.6      shprg = SHPRG(input=n, output=m, EQ=EQ, EP=EP, seedA=seedA)
    75                                           
    76         1       4500.0   4500.0      0.0      global_comm = MPI.COMM_WORLD
    77         1       8000.0   8000.0      0.0      global_rank = global_comm.Get_rank()
    78         1       3000.0   3000.0      0.0      global_size = global_comm.Get_size()
    79                                           
    80         1      21700.0  21700.0      0.0      global_grp = global_comm.Get_group()
    81         1      31100.0  31100.0      0.0      client_grp = global_grp.Excl([global_size - 1])
    82         1     151500.0 151500.0      0.0      client_comm = global_comm.Create(client_grp)
    83         1       6500.0   6500.0      0.0      client_rank = None if client_comm == MPI.COMM_NULL else client_comm.Get_rank(
    84                                               )
    85         1       4000.0   4000.0      0.0      client_size = client_grp.Get_size()
    86                                           
    87         1       1700.0   1700.0      0.0      is_server = False
    88         1       2400.0   2400.0      0.0      if global_rank == global_size - 1:
    89                                                   is_server = True
    90         1       1300.0   1300.0      0.0      server_rank = global_size - 1
    91                                           
    92         1      10000.0  10000.0      0.0      timer = Timer()
    93                                           
    94                                               #* initial node
    95         1       1900.0   1900.0      0.0      if is_server:
    96                                                   node = Node(None, None, global_comm, client_comm)
    97                                                   temp_dataset = []
    98                                                   temp_folder_path = folder_path + "/temp"
    99                                                   for i in range(client_size):
   100                                                       temp_path = "{}/SVM_{}_{}_{}-{}_temp.hdf5".format(
   101                                                           temp_folder_path, examples, features, i, nodes)
   102                                                       temp_dataset.append(
   103                                                           HDF5Dataset.new(file_path=temp_path,
   104                                                                             data_shape=(sub_features, ),
   105                                                                             target_shape=(),
   106                                                                             dtype=np.int64))
   107                                               else:
   108         2      10600.0   5300.0      0.0          src_path = "{}/SVM_{}_{}_{}-{}.hdf5".format(folder_path, examples,
   109         1       1200.0   1200.0      0.0                                                      features, global_rank,
   110         1       1100.0   1100.0      0.0                                                      nodes)
   111         1   11317800.0    1e+07      0.6          src_dataset = HDF5Dataset(file_path=src_path)
   112         1       2100.0   2100.0      0.0          tgt_folder_path = folder_path + "/tgt"
   113         2       7300.0   3650.0      0.0          tgt_path = "{}/SVM_{}_{}_{}-{}_tgt.hdf5".format(
   114         1       1100.0   1100.0      0.0              tgt_folder_path, examples, features, global_rank, nodes)
   115         2   24907700.0    1e+07      1.3          tgt_dataset = HDF5Dataset.new(file_path=tgt_path,
   116         1       1100.0   1100.0      0.0                                          data_shape=(features, ),
   117         1       1000.0   1000.0      0.0                                          target_shape=(),
   118         1       3200.0   3200.0      0.0                                          dtype=np.int64)
   119         1    2194800.0    2e+06      0.1          node = Node(src_dataset, tgt_dataset, global_comm, client_comm)
   120                                           
   121                                               # print("start test...")
   122         1      20900.0  20900.0      0.0      timer.set_time_point("start_test")
   123         2      35300.0  17650.0      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   124         1      73500.0  73500.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   125         1      26900.0  26900.0      0.0          node.getTotalDataRecv()))
   126                                               
   127                                               # random permute
   128         1       1900.0   1900.0      0.0      if is_server:
   129                                                   permutes =[]
   130                                                   for _ in range(client_size):
   131                                                       all_indices = list(range(sub_examples))
   132                                                       random.shuffle(all_indices)
   133                                                       permutes.append(all_indices)
   134                                                   # print(random_permutes)
   135                                               else:
   136         1       2200.0   2200.0      0.0          pass
   137                                           
   138                                               # sys.exit()
   139                                           
   140                                               # share_tras
   141         1       2300.0   2300.0      0.0      if is_server:
   142                                                   all_deltas = [[] for _ in range(client_size)]
   143                                           
   144                                                   def STsend_thread(rank):
   145                                                   # for rank in range(client_size):
   146                                                       for j in range(client_size):
   147                                                           if rank == j:
   148                                                               all_deltas[rank].append(None)
   149                                                               continue
   150                                                           delta = np.empty((sub_examples, n), dtype=object)
   151                                                           for k in range(n):
   152                                                               _delta = node.STsend(size=sub_examples,
   153                                                                                    permute=permutes[j],
   154                                                                                    recver=rank,
   155                                                                                    tag=j + k * 100,
   156                                                                                    Sip="127.0.0.1:12233")
   157                                                               delta[:, k] = _delta
   158                                                           all_deltas[rank].append(delta)
   159                                           
   160                                                   with ThreadPoolExecutor(max_workers=client_size) as executor:
   161                                                       executor.map(STsend_thread, range(client_size))
   162                                               else:
   163         1       2300.0   2300.0      0.0          a_s = []
   164         1       1600.0   1600.0      0.0          b_s = []
   165         4      11900.0   2975.0      0.0          for rank in range(client_size):
   166         3       7900.0   2633.3      0.0              if client_rank == rank:
   167         1       1200.0   1200.0      0.0                  a_s.append(None)
   168         1       1500.0   1500.0      0.0                  b_s.append(None)
   169         1       1300.0   1300.0      0.0                  continue
   170         2      35900.0  17950.0      0.0              a = np.empty((sub_examples, n), dtype=object)
   171         2       9500.0   4750.0      0.0              b = np.empty((sub_examples, n), dtype=object)
   172         6      16700.0   2783.3      0.0              for k in range(n):
   173         8 1641036800.0    2e+08     88.3                  _a, _b = node.STrecv(size=sub_examples,
   174         4       6300.0   1575.0      0.0                                       sender=server_rank,
   175         4       8600.0   2150.0      0.0                                       tag=rank + k * 100,
   176         4       4500.0   1125.0      0.0                                       Sip="127.0.0.1:12233")
   177         4      39300.0   9825.0      0.0                  a[:, k] = _a
   178         4      33900.0   8475.0      0.0                  b[:, k] = _b
   179         2       6200.0   3100.0      0.0              a_s.append(a)
   180         2       3900.0   1950.0      0.0              b_s.append(b)
   181                                           
   182         1      13300.0  13300.0      0.0      timer.set_time_point("share_tras")
   183         2      22300.0  11150.0      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   184         1      30700.0  30700.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   185         1       9900.0   9900.0      0.0          node.getTotalDataRecv()))
   186                                               
   187                                               # sys.exit()    
   188                                           
   189                                               #* encrypted ID
   190         1       1400.0   1400.0      0.0      if is_server:
   191                                                   id_enc = None
   192                                               else:
   193         1       9100.0   9100.0      0.0          prf = PRF(secret_key=secret_key)
   194         1     888600.0 888600.0      0.0          id_enc = np.vectorize(prf.compute)(node.src_dataset.ids[...])
   195         1     198200.0 198200.0      0.0      id_enc_gather = node.gather(id_enc, server_rank)
   196                                           
   197                                               #* server-aid PSI
   198         1       1600.0   1600.0      0.0      if is_server:
   199                                                   final_permutes, permute_length = node.find_intersection_indices(
   200                                                       id_enc_gather[:-1])
   201                                               else:
   202         1       1300.0   1300.0      0.0          pass
   203                                               # sys.exit()
   204                                           
   205                                               #* find permute
   206         1       1200.0   1200.0      0.0      if is_server:
   207                                                   def find_permute(permute, final_permute):
   208                                                       pre_permute = [0] * len(all_indices)
   209                                                       for i in range(len(all_indices)):
   210                                                           pre_permute[permute[i]] = final_permute[i]
   211                                                       return pre_permute
   212                                                   pre_permutes = []
   213                                                   for i in range(client_size):
   214                                                       pre_permutes.append(find_permute(permutes[i], final_permutes[i]))
   215                                                   pre_permutes.append(None)
   216                                           
   217                                                   print(pre_permutes)
   218                                                   node.scatter(pre_permutes, server_rank)
   219                                               else:
   220         1    1202000.0    1e+06      0.1          pre_permute = node.scatter(None, server_rank)
   221         1      10800.0  10800.0      0.0          print(pre_permute)
   222                                           
   223                                               # sys.exit()
   224                                           
   225                                               #* seeds generation
   226         1       1400.0   1400.0      0.0      if is_server:
   227                                                   pass
   228                                               else:
   229         2      85400.0  42700.0      0.0          seeds = [(None if i == client_rank else np.array(
   230                                                       [[k + j * 10 + i * 100 + client_rank * 1000 for k in range(n)]
   231                                                        for j in range(sub_examples)]))
   232         1       2100.0   2100.0      0.0                   for i in range(client_size)]  #! test
   233                                                   
   234                                                   # seeds = [(None if i == client_rank else SHPRG.genMatrixAES128(seed=token_bytes(16),n=sub_examples,m=n,EQ=EQ) ) for i in range(client_size)]
   235                                           
   236         1       8600.0   8600.0      0.0      timer.set_time_point("server_psi")
   237         2      13200.0   6600.0      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   238         1      25200.0  25200.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   239         1      15300.0  15300.0      0.0          node.getTotalDataRecv()))
   240                                               
   241                                               # sys.exit()
   242                                           
   243                                               # seeds share
   244         1       1200.0   1200.0      0.0      if is_server:
   245                                                   pass
   246                                               else:
   247         1     366100.0 366100.0      0.0          seeds_exchanged = node.alltoall(seeds, in_clients=True)
   248                                           
   249         1       7000.0   7000.0      0.0      timer.set_time_point("seed_share")
   250         2      11900.0   5950.0      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   251         1      23000.0  23000.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   252         1      13500.0  13500.0      0.0          node.getTotalDataRecv()))
   253                                           
   254                                           
   255                                               # permute and share
   256         1       1800.0   1800.0      0.0      if is_server:
   257                                                   seeds_exchanged = None
   258                                               else:
   259         4       8100.0   2025.0      0.0          for i in range(client_size):
   260         3       4900.0   1633.3      0.0              if client_rank == i:
   261         1       1100.0   1100.0      0.0                  continue
   262         2      83200.0  41600.0      0.0              seeds_exchanged[i] = (seeds_exchanged[i] - a_s[i]) % q
   263         1     123700.0 123700.0      0.0      seeds_share_gather = node.gather(seeds_exchanged, server_rank)
   264                                           
   265         1       1700.0   1700.0      0.0      if is_server:
   266                                                   for i in range(client_size):
   267                                                       for rank in range(client_size):
   268                                                           if i == rank:
   269                                                               continue
   270                                                           seeds_share_gather[i][rank] = (
   271                                                               seeds_share_gather[i][rank][permutes[rank]] +
   272                                                               all_deltas[i][rank]) % q
   273                                                   seed1s_s = seeds_share_gather
   274                                               else:
   275         1       1500.0   1500.0      0.0          seed2s = b_s
   276                                           
   277         1       6300.0   6300.0      0.0      timer.set_time_point("perm_share")
   278         2      12800.0   6400.0      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   279         1      23900.0  23900.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   280         1      43100.0  43100.0      0.0          node.getTotalDataRecv()))
   281                                               
   282                                           
   283                                               #* share
   284         1       3300.0   3300.0      0.0      round_examples = sub_examples // chunk + (1 if sub_examples % chunk != 0
   285                                                                                         else 0)
   286         1       1800.0   1800.0      0.0      if is_server:
   287                                                   def sharesend_thread(rank):
   288                                                       for i in range(round_examples):
   289                                                           recv = node.recv(source=rank, tag=i)
   290                                                           temp_dataset[rank].add(data=recv[0], targets=recv[1])
   291                                           
   292                                                   with ThreadPoolExecutor(max_workers=client_size) as executor:
   293                                                       executor.map(sharesend_thread, range(client_size))
   294                                               else:
   295         1       4000.0   4000.0      0.0          with_targets = node.src_dataset.with_targets
   296                                           
   297         1      17500.0  17500.0      0.0          data_to_server = np.empty((chunk, sub_features), dtype=np.int64)
   298         2       2700.0   1350.0      0.0          targets_to_server = np.empty(
   299         2       3000.0   1500.0      0.0              (chunk, target_length), dtype=np.int64) if with_targets else None
   300         1       1300.0   1300.0      0.0          index = 0
   301                                           
   302         2       5400.0   2700.0      0.0          for i in range(round_examples):
   303         1       4300.0   4300.0      0.0              rest = min(sub_examples - index, chunk)
   304         6      13200.0   2200.0      0.0              for j in range(rest):
   305         5      12000.0   2400.0      0.0                  perm_index = pre_permute[index + j]
   306         5    2271200.0 454240.0      0.1                  data_to_server[j] = encoder.encode(node.src_dataset.data[perm_index])
   307         5      12000.0   2400.0      0.0                  if with_targets:
   308                                                               targets_to_server[j] = encoder.encode(node.src_dataset.targets[perm_index].reshape((1, target_length)))
   309         4      12700.0   3175.0      0.0              for k in range(client_size):
   310         3       5700.0   1900.0      0.0                  if k == client_rank:
   311         1       1000.0   1000.0      0.0                      continue
   312         6     125700.0  20950.0      0.0                  output_prg = mod_range(
   313         2     489800.0 244900.0      0.0                      shprg.genRandom(seeds[k][index:index + rest]),
   314         4      95800.0  23950.0      0.0                      p).astype(np.int64)
   315         2      57700.0  28850.0      0.0                  data_to_server[:rest] -= output_prg[:, :sub_features]
   316         2       4100.0   2050.0      0.0                  if with_targets:
   317                                                               targets_to_server[:rest] -= output_prg[:, sub_features:sub_features +
   318                                                                                    target_length]
   319         1       1800.0   1800.0      0.0              index += rest
   320         1       1700.0   1700.0      0.0              if target_length == 1:
   321         2     171500.0  85750.0      0.0                  node.send(
   322         3       6200.0   2066.7      0.0                      (data_to_server[:rest], targets_to_server[:rest].ravel()
   323         2       2300.0   1150.0      0.0                       if with_targets else None),
   324         1       1400.0   1400.0      0.0                      dest=server_rank,
   325         1       3100.0   3100.0      0.0                      tag=i)
   326         1       1700.0   1700.0      0.0                  continue
   327                                                       node.send((data_to_server[:rest],
   328                                                                  targets_to_server[:rest] if with_targets else None),
   329                                                                 dest=server_rank,
   330                                                                 tag=i)
   331                                           
   332         1       7400.0   7400.0      0.0      timer.set_time_point("dset_share")
   333         2      21200.0  10600.0      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   334         1      35900.0  35900.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   335         1      26300.0  26300.0      0.0          node.getTotalDataRecv()))
   336                                               
   337                                               # sys.exit()
   338                                           
   339                                               # share intersection size
   340         1       2500.0   2500.0      0.0      if is_server:
   341                                                   pass
   342                                               else:
   343         1       1600.0   1600.0      0.0          permute_length = None
   344         1    3347300.0    3e+06      0.2      permute_length = global_comm.bcast(permute_length, root=server_rank)
   345                                           
   346                                               # sys.exit()
   347                                           
   348                                               # tgt dataset server send
   349         1       4700.0   4700.0      0.0      round_inter = permute_length // chunk + (1 if permute_length % chunk != 0
   350                                                                                        else 0)
   351         1       1400.0   1400.0      0.0      if is_server:
   352                                                   def tgt_dataset_send(rank):
   353                                                   # for rank in range(client_size):
   354                                                       with_targets = (rank == targets_rank)
   355                                           
   356                                                       data_to_client = np.empty((chunk, sub_features), dtype=np.int64)
   357                                                       targets_to_client = np.empty(
   358                                                           (chunk,
   359                                                            target_length), dtype=np.int64) if with_targets else None
   360                                                       index = 0
   361                                           
   362                                                       for i in range(round_inter):
   363                                                           rest = min(permute_length - index, chunk)
   364                                                           for j in range(rest):
   365                                                               perm_index = permutes[rank][index + j]
   366                                                               data_to_client[j] = temp_dataset[rank].data[perm_index]
   367                                                               if with_targets:
   368                                                                   targets_to_client[j] = temp_dataset[rank].targets[
   369                                                                       perm_index].reshape((1, target_length))
   370                                                           for k in range(client_size):
   371                                                               if k == rank:
   372                                                                   continue
   373                                                               output_prg = mod_range(
   374                                                                   shprg.genRandom(seed1s_s[k][rank][index:index + rest]),
   375                                                                   p).astype(np.int64)
   376                                                               data_to_client[:rest] += output_prg[:, :sub_features]
   377                                                               if with_targets:
   378                                                                   targets_to_client[:rest] += output_prg[:, sub_features:sub_features+target_length]
   379                                                           index += rest
   380                                                           if target_length == 1:
   381                                                               node.send(
   382                                                                   (data_to_client[:rest], targets_to_client[:rest].ravel()
   383                                                                   if with_targets else None),
   384                                                                   dest=rank,
   385                                                                   tag=i)
   386                                                               continue
   387                                                           node.send(
   388                                                               (data_to_client[:rest],
   389                                                                   targets_to_client[:rest] if with_targets else None),
   390                                                               dest=rank,
   391                                                               tag=i)
   392                                           
   393                                                   with ThreadPoolExecutor(max_workers=client_size) as executor:
   394                                                       executor.map(tgt_dataset_send, range(client_size))
   395                                               else:
   396         1       3400.0   3400.0      0.0          index = [0] * client_size
   397         1      17800.0  17800.0      0.0          data = np.empty((chunk, features), dtype=np.int64)
   398         1       8200.0   8200.0      0.0          targets = np.empty((chunk,target_length), dtype=np.int64)
   399         2       6700.0   3350.0      0.0          for i in range(round_inter):
   400         1    4756900.0    5e+06      0.3              recv = node.recv(source=server_rank, tag=i)
   401         1       3800.0   3800.0      0.0              rest = len(recv[0])
   402                                                       # print(rest)
   403         4       8300.0   2075.0      0.0              for rank in range(client_size):
   404         3       5600.0   1866.7      0.0                  if client_rank == rank:
   405         2       7400.0   3700.0      0.0                      data[:rest, rank * sub_features:(rank + 1) *
   406         2       2400.0   1200.0      0.0                           sub_features] = recv[0]
   407         1       1300.0   1300.0      0.0                      if rank == targets_rank:
   408                                                                   targets[:rest]= recv[1].reshape((rest, target_length))
   409         1       1100.0   1100.0      0.0                      continue
   410         6      92400.0  15400.0      0.0                  output_prg = mod_range(
   411         2     409300.0 204650.0      0.0                      shprg.genRandom(seed2s[rank][index[rank]:index[rank] + rest]),
   412         4      42000.0  10500.0      0.0                        p).astype(np.int64)
   413         4      15300.0   3825.0      0.0                  data[:rest, rank * sub_features:(rank + 1) *
   414         4       9600.0   2400.0      0.0                       sub_features] = output_prg[:, :sub_features]
   415         2       3800.0   1900.0      0.0                  if rank == targets_rank:
   416         1       6000.0   6000.0      0.0                      targets[:rest] = output_prg[:, sub_features:sub_features+target_length]
   417         2       7000.0   3500.0      0.0                  index[rank] += rest
   418         1       1200.0   1200.0      0.0              if target_length == 1:
   419         2     908700.0 454350.0      0.0                  node.tgt_dataset.add(data=data[:rest],
   420         1       6400.0   6400.0      0.0                                       targets=targets[:rest].ravel())
   421         1       1200.0   1200.0      0.0                  continue
   422                                                       node.tgt_dataset.add(data=data[:rest], targets=targets[:rest])
   423                                           
   424         1       7200.0   7200.0      0.0      timer.set_time_point("tgt_final ")
   425         2      15100.0   7550.0      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   426         1      32700.0  32700.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   427         1       9600.0   9600.0      0.0          node.getTotalDataRecv()))
   428         1       3500.0   3500.0      0.0      print("intersection size:{}".format(permute_length))
   429         1      41900.0  41900.0      0.0      print(timer)
   430                                           
   431         1     442600.0 442600.0      0.0      file.close()

