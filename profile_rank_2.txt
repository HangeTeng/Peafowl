Timer unit: 1e-09 s

Total time: 48.961 s
File: /home/mSAID/main.py
Function: main at line 41

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    41                                           def main():
    42                                               # dataset
    43         1       4000.0   4000.0      0.0      arguments = sys.argv[1:]
    44         1       3800.0   3800.0      0.0      examples = int(arguments[0])
    45         1       1400.0   1400.0      0.0      features = int(arguments[1])
    46         1       1100.0   1100.0      0.0      chunk = 1000
    47                                               # sub_dataset
    48         1      15500.0  15500.0      0.0      nodes = MPI.COMM_WORLD.Get_size() - 1
    49         1       1700.0   1700.0      0.0      sub_examples = examples * 5 // 6
    50         1       1100.0   1100.0      0.0      sub_features = features // nodes
    51         1       1000.0   1000.0      0.0      targets_rank = 0
    52         1        900.0    900.0      0.0      target_length = 1
    53         1       3500.0   3500.0      0.0      folder_path = "./data/SVM_{}_{}".format(examples, features)
    54                                           
    55         1     767800.0 767800.0      0.0      file = open(folder_path + "/log", 'a')
    56         1       2100.0   2100.0      0.0      sys.stdout = file
    57         1       1400.0   1400.0      0.0      sys.stdout = sys.__stdout__
    58                                           
    59         1       1500.0   1500.0      0.0      secret_key = "secret_key"
    60                                           
    61                                               # shprg
    62         1       1100.0   1100.0      0.0      n = 2
    63         1       1500.0   1500.0      0.0      m = sub_features + target_length
    64         1       1400.0   1400.0      0.0      EQ = 128
    65         1       1000.0   1000.0      0.0      EP = 64
    66         1       3000.0   3000.0      0.0      q = 2**EQ
    67         1       1700.0   1700.0      0.0      p = 2**EP
    68         1      16700.0  16700.0      0.0      seedA = bytes(0x355678)
    69                                           
    70         1       1100.0   1100.0      0.0      precision_bits = 16
    71         1       6900.0   6900.0      0.0      encoder = FixedPointEncoder(precision_bits=precision_bits)
    72                                           
    73         1  739081800.0    7e+08      1.5      shprg = SHPRG(input=n, output=m, EQ=EQ, EP=EP, seedA=seedA)
    74                                           
    75         1       5200.0   5200.0      0.0      global_comm = MPI.COMM_WORLD
    76         1       7100.0   7100.0      0.0      global_rank = global_comm.Get_rank()
    77         1       3200.0   3200.0      0.0      global_size = global_comm.Get_size()
    78                                           
    79         1      20300.0  20300.0      0.0      global_grp = global_comm.Get_group()
    80         1      11400.0  11400.0      0.0      client_grp = global_grp.Excl([global_size - 1])
    81         1     139300.0 139300.0      0.0      client_comm = global_comm.Create(client_grp)
    82         1       4000.0   4000.0      0.0      client_rank = None if client_comm == MPI.COMM_NULL else client_comm.Get_rank(
    83                                               )
    84         1       2500.0   2500.0      0.0      client_size = client_grp.Get_size()
    85                                           
    86         1       1300.0   1300.0      0.0      is_server = False
    87         1       2100.0   2100.0      0.0      if global_rank == global_size - 1:
    88                                                   is_server = True
    89         1       1600.0   1600.0      0.0      server_rank = global_size - 1
    90                                           
    91         1       8700.0   8700.0      0.0      timer = Timer()
    92                                           
    93                                               #* initial node
    94         1       1800.0   1800.0      0.0      if is_server:
    95                                                   node = Node(None, None, global_comm, client_comm)
    96                                                   temp_dataset = []
    97                                                   temp_folder_path = folder_path + "/temp"
    98                                                   for i in range(client_size):
    99                                                       temp_path = "{}/SVM_{}_{}_{}-{}_temp.hdf5".format(
   100                                                           temp_folder_path, examples, features, i, nodes)
   101                                                       temp_dataset.append(
   102                                                           HDF5Dataset.empty(file_path=temp_path,
   103                                                                             data_shape=(sub_features, ),
   104                                                                             targets_shape=(),
   105                                                                             dtype=np.int64))
   106                                               else:
   107         2       8900.0   4450.0      0.0          src_path = "{}/SVM_{}_{}_{}-{}.hdf5".format(folder_path, examples,
   108         1       1200.0   1200.0      0.0                                                      features, global_rank,
   109         1       1100.0   1100.0      0.0                                                      nodes)
   110         1  142467700.0    1e+08      0.3          src_dataset = HDF5Dataset(file_path=src_path)
   111         1       2300.0   2300.0      0.0          tgt_folder_path = folder_path + "/tgt"
   112         2      11100.0   5550.0      0.0          tgt_path = "{}/SVM_{}_{}_{}-{}_tgt.hdf5".format(
   113         1       1200.0   1200.0      0.0              tgt_folder_path, examples, features, global_rank, nodes)
   114         2  453633700.0    2e+08      0.9          tgt_dataset = HDF5Dataset.empty(file_path=tgt_path,
   115         1       2000.0   2000.0      0.0                                          data_shape=(features, ),
   116         1       1000.0   1000.0      0.0                                          targets_shape=(),
   117         1       3100.0   3100.0      0.0                                          dtype=np.int64)
   118         1  474550000.0    5e+08      1.0          node = Node(src_dataset, tgt_dataset, global_comm, client_comm)
   119                                           
   120                                               # print("start test...")
   121         1      18400.0  18400.0      0.0      timer.set_time_point("start_test")
   122         2      35700.0  17850.0      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   123         1     163300.0 163300.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   124         1      18900.0  18900.0      0.0          node.getTotalDataRecv()))
   125                                           
   126                                               #* encrypted ID
   127         1       1900.0   1900.0      0.0      if is_server:
   128                                                   id_enc = None
   129                                               else:
   130         1      13700.0  13700.0      0.0          prf = PRF(secret_key=secret_key)
   131         1    1034800.0    1e+06      0.0          id_enc = np.vectorize(prf.compute)(node.src_dataset.ids[...])
   132         1     207600.0 207600.0      0.0      id_enc_gather = node.gather(id_enc, server_rank)
   133                                           
   134                                               #* server-aid PSI
   135         1       1800.0   1800.0      0.0      if is_server:
   136                                                   permutes, permute_length = node.find_intersection_indices(
   137                                                       id_enc_gather[:-1])
   138                                               else:
   139         1       1400.0   1400.0      0.0          pass
   140                                           
   141                                               #* seeds generation
   142         1       1400.0   1400.0      0.0      if is_server:
   143                                                   pass
   144                                               else:
   145         2     139700.0  69850.0      0.0          seeds = [(None if i == client_rank else np.array(
   146                                                       [[k + j * 10 + i * 100 + client_rank * 1000 for k in range(n)]
   147                                                        for j in range(sub_examples)]))
   148         1       2500.0   2500.0      0.0                   for i in range(client_size)]  #! test
   149                                                   # seeds = [(None if i == client_rank else SHPRG.genMatrixAES128(seed=token_bytes(16),n=sub_examples,m=n,EQ=EQ) ) for i in range(client_size)]
   150                                           
   151         1       7500.0   7500.0      0.0      timer.set_time_point("server_psi")
   152         2      15200.0   7600.0      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   153         1      29400.0  29400.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   154         1      14100.0  14100.0      0.0          node.getTotalDataRecv()))
   155                                           
   156                                               #* share
   157         1       3100.0   3100.0      0.0      round_examples = sub_examples // chunk + (1 if sub_examples % chunk != 0
   158                                                                                         else 0)
   159         1       1600.0   1600.0      0.0      if is_server:
   160                                                   def sharesend_thread(rank):
   161                                                       for i in range(round_examples):
   162                                                           recv = node.recv(source=rank, tag=i)
   163                                                           temp_dataset[rank].add(data=recv[0], targets=recv[1])
   164                                           
   165                                                   with ThreadPoolExecutor(max_workers=client_size) as executor:
   166                                                       executor.map(sharesend_thread, range(client_size))
   167                                               else:
   168         1       2300.0   2300.0      0.0          with_targets = node.src_dataset.with_targets
   169                                           
   170         1      16300.0  16300.0      0.0          data_to_server = np.empty((chunk, sub_features), dtype=np.int64)
   171         2       2600.0   1300.0      0.0          targets_to_server = np.empty(
   172         2       2900.0   1450.0      0.0              (chunk, target_length), dtype=np.int64) if with_targets else None
   173         1       1200.0   1200.0      0.0          index = 0
   174                                           
   175         2       4900.0   2450.0      0.0          for i in range(round_examples):
   176         1       4200.0   4200.0      0.0              rest = min(sub_examples - index, chunk)
   177         1   59371800.0    6e+07      0.1              data_to_server[:rest] = encoder.encode(node.src_dataset.data[index:index + rest])
   178         1       1500.0   1500.0      0.0              if with_targets:
   179                                                           targets_to_server[:rest] = encoder.encode(
   180                                                               node.src_dataset.targets[index:index + rest]).reshape(
   181                                                                   rest, target_length)
   182         5      13800.0   2760.0      0.0              for k in range(client_size):
   183         4       6700.0   1675.0      0.0                  if k == client_rank:
   184         1       1500.0   1500.0      0.0                      continue
   185         9     144300.0  16033.3      0.0                  output_prg = mod_range(
   186         3     555700.0 185233.3      0.0                      shprg.genRandom(seeds[k][index:index + rest]),
   187         6      66300.0  11050.0      0.0                      p).astype(np.int64)
   188         3      65300.0  21766.7      0.0                  data_to_server[:rest] -= output_prg[:, :sub_features]
   189         3       7500.0   2500.0      0.0                  if with_targets:
   190                                                               targets_to_server[:rest] -= output_prg[:, sub_features:sub_features +
   191                                                                                    target_length]
   192         1       1900.0   1900.0      0.0              index += rest
   193         1       1900.0   1900.0      0.0              if target_length == 1:
   194         2     182000.0  91000.0      0.0                  node.send(
   195         3       5400.0   1800.0      0.0                      (data_to_server[:rest], targets_to_server[:rest].ravel()
   196         2       2400.0   1200.0      0.0                       if with_targets else None),
   197         1       1200.0   1200.0      0.0                      dest=server_rank,
   198         1       1100.0   1100.0      0.0                      tag=i)
   199         1       2100.0   2100.0      0.0                  continue
   200                                                       node.send((data_to_server[:rest],
   201                                                                  targets_to_server[:rest] if with_targets else None),
   202                                                                 dest=server_rank,
   203                                                                 tag=i)
   204                                           
   205         1       9300.0   9300.0      0.0      timer.set_time_point("dset_share")
   206         2      26700.0  13350.0      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   207         1      44400.0  44400.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   208         1      15900.0  15900.0      0.0          node.getTotalDataRecv()))
   209                                           
   210                                               # seeds share
   211         1       1900.0   1900.0      0.0      if is_server:
   212                                                   pass
   213                                               else:
   214         1  242857400.0    2e+08      0.5          seeds_exchanged = node.alltoall(seeds, in_clients=True)
   215                                           
   216         1       8800.0   8800.0      0.0      timer.set_time_point("seed_share")
   217         2      17300.0   8650.0      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   218         1      33000.0  33000.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   219         1      13900.0  13900.0      0.0          node.getTotalDataRecv()))
   220                                           
   221                                               # share_tras
   222         1       1500.0   1500.0      0.0      if is_server:
   223                                                   all_deltas = [[] for _ in range(client_size)]
   224                                           
   225                                                   def STsend_thread(rank):
   226                                                       for j in range(client_size):
   227                                                           if rank == j:
   228                                                               all_deltas[rank].append(None)
   229                                                               continue
   230                                                           delta = np.empty((sub_examples, n), dtype=object)
   231                                                           for k in range(n):
   232                                                               _delta = node.STsend(size=sub_examples,
   233                                                                                    permute=permutes[j],
   234                                                                                    recver=rank,
   235                                                                                    tag=j + k * 100)
   236                                                               delta[:, k] = _delta
   237                                                           all_deltas[rank].append(delta)
   238                                           
   239                                                   with ThreadPoolExecutor(max_workers=client_size) as executor:
   240                                                       executor.map(STsend_thread, range(client_size))
   241                                               else:
   242         1       1400.0   1400.0      0.0          a_s = []
   243         1       1400.0   1400.0      0.0          b_s = []
   244         5      10200.0   2040.0      0.0          for rank in range(client_size):
   245         4       7800.0   1950.0      0.0              if client_rank == rank:
   246         1       1700.0   1700.0      0.0                  a_s.append(None)
   247         1       1500.0   1500.0      0.0                  b_s.append(None)
   248         1       1200.0   1200.0      0.0                  continue
   249         3      25800.0   8600.0      0.0              a = np.empty((sub_examples, n), dtype=object)
   250         3       9500.0   3166.7      0.0              b = np.empty((sub_examples, n), dtype=object)
   251         9      23000.0   2555.6      0.0              for k in range(n):
   252        12        4e+10    3e+09     83.3                  _a, _b = node.STrecv(size=sub_examples,
   253         6       7000.0   1166.7      0.0                                       sender=server_rank,
   254         6      11100.0   1850.0      0.0                                       tag=rank + k * 100)
   255         6      57200.0   9533.3      0.0                  a[:, k] = _a
   256         6      22500.0   3750.0      0.0                  b[:, k] = _b
   257         3       8200.0   2733.3      0.0              a_s.append(a)
   258         3       8100.0   2700.0      0.0              b_s.append(b)
   259                                           
   260         1      11800.0  11800.0      0.0      timer.set_time_point("share_tras")
   261         2      29600.0  14800.0      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   262         1      47000.0  47000.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   263         1      22300.0  22300.0      0.0          node.getTotalDataRecv()))
   264                                           
   265                                               # permute and share
   266         1       1500.0   1500.0      0.0      if is_server:
   267                                                   seeds_exchanged = None
   268                                               else:
   269         5      11800.0   2360.0      0.0          for i in range(client_size):
   270         4       6700.0   1675.0      0.0              if client_rank == i:
   271         1       1300.0   1300.0      0.0                  continue
   272         3     137000.0  45666.7      0.0              seeds_exchanged[i] = (seeds_exchanged[i] - a_s[i]) % q
   273         1     207900.0 207900.0      0.0      seeds_share_gather = node.gather(seeds_exchanged, server_rank)
   274                                           
   275         1       3700.0   3700.0      0.0      if is_server:
   276                                                   for i in range(client_size):
   277                                                       for rank in range(client_size):
   278                                                           if i == rank:
   279                                                               continue
   280                                                           seeds_share_gather[i][rank] = (
   281                                                               seeds_share_gather[i][rank][permutes[rank]] +
   282                                                               all_deltas[i][rank]) % q
   283                                                   seed1s_s = seeds_share_gather
   284                                               else:
   285         1       1500.0   1500.0      0.0          seed2s = b_s
   286                                           
   287         1       9900.0   9900.0      0.0      timer.set_time_point("perm_share")
   288         2      14200.0   7100.0      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   289         1      30500.0  30500.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   290         1      20600.0  20600.0      0.0          node.getTotalDataRecv()))
   291                                           
   292                                               # share intersection size
   293         1       1500.0   1500.0      0.0      if is_server:
   294                                                   pass
   295                                               else:
   296         1       1700.0   1700.0      0.0          permute_length = None
   297         1 5856807900.0    6e+09     12.0      permute_length = global_comm.bcast(permute_length, root=server_rank)
   298                                           
   299                                               # sys.exit()
   300                                           
   301                                               # tgt dataset server send
   302         1      34200.0  34200.0      0.0      round_inter = permute_length // chunk + (1 if permute_length % chunk != 0
   303                                                                                        else 0)
   304         1       1800.0   1800.0      0.0      if is_server:
   305                                                   def tgt_dataset_send(rank):
   306                                                   # for rank in range(client_size):
   307                                                       with_targets = (rank == targets_rank)
   308                                           
   309                                                       data_to_client = np.empty((chunk, sub_features), dtype=np.int64)
   310                                                       targets_to_client = np.empty(
   311                                                           (chunk,
   312                                                            target_length), dtype=np.int64) if with_targets else None
   313                                                       index = 0
   314                                           
   315                                                       for i in range(round_inter):
   316                                                           rest = min(permute_length - index, chunk)
   317                                                           for j in range(rest):
   318                                                               perm_index = permutes[rank][index + j]
   319                                                               data_to_client[j] = temp_dataset[rank].data[perm_index]
   320                                                               if with_targets:
   321                                                                   targets_to_client[j] = temp_dataset[rank].targets[
   322                                                                       perm_index].reshape((1, target_length))
   323                                                           for k in range(client_size):
   324                                                               if k == rank:
   325                                                                   continue
   326                                                               output_prg = mod_range(
   327                                                                   shprg.genRandom(seed1s_s[k][rank][index:index + rest]),
   328                                                                   p).astype(np.int64)
   329                                                               data_to_client[:rest] += output_prg[:, :sub_features]
   330                                                               if with_targets:
   331                                                                   targets_to_client[:rest] += output_prg[:, sub_features:sub_features+target_length]
   332                                                           index += rest
   333                                                           if target_length == 1:
   334                                                               node.send(
   335                                                                   (data_to_client[:rest], targets_to_client[:rest].ravel()
   336                                                                   if with_targets else None),
   337                                                                   dest=rank,
   338                                                                   tag=i)
   339                                                               continue
   340                                                           node.send(
   341                                                               (data_to_client[:rest],
   342                                                                   targets_to_client[:rest] if with_targets else None),
   343                                                               dest=rank,
   344                                                               tag=i)
   345                                           
   346                                                   with ThreadPoolExecutor(max_workers=client_size) as executor:
   347                                                       executor.map(tgt_dataset_send, range(client_size))
   348                                               else:
   349         1       2600.0   2600.0      0.0          index = [0] * client_size
   350         1      26600.0  26600.0      0.0          data = np.empty((chunk, features), dtype=np.int64)
   351         1       6300.0   6300.0      0.0          targets = np.empty((chunk,target_length), dtype=np.int64)
   352         2       5800.0   2900.0      0.0          for i in range(round_inter):
   353         1    9472900.0    9e+06      0.0              recv = node.recv(source=server_rank, tag=i)
   354         1       2500.0   2500.0      0.0              rest = len(recv[0])
   355                                                       # print(rest)
   356         5       7400.0   1480.0      0.0              for rank in range(client_size):
   357         4       5500.0   1375.0      0.0                  if client_rank == rank:
   358         2       3700.0   1850.0      0.0                      data[:rest, rank * sub_features:(rank + 1) *
   359         2       1900.0    950.0      0.0                           sub_features] = recv[0]
   360         1       1100.0   1100.0      0.0                      if rank == targets_rank:
   361                                                                   targets[:rest]= recv[1].reshape((rest, target_length))
   362         1        900.0    900.0      0.0                      continue
   363         9      78400.0   8711.1      0.0                  output_prg = mod_range(
   364         3     325800.0 108600.0      0.0                      shprg.genRandom(seed2s[rank][index[rank]:index[rank] + rest]),
   365         6      33400.0   5566.7      0.0                        p).astype(np.int64)
   366         6      14700.0   2450.0      0.0                  data[:rest, rank * sub_features:(rank + 1) *
   367         6       9500.0   1583.3      0.0                       sub_features] = output_prg[:, :sub_features]
   368         3       3600.0   1200.0      0.0                  if rank == targets_rank:
   369         1       4600.0   4600.0      0.0                      targets[:rest] = output_prg[:, sub_features:sub_features+target_length]
   370         3       5000.0   1666.7      0.0                  index[rank] += rest
   371         1       1300.0   1300.0      0.0              if target_length == 1:
   372         2     700300.0 350150.0      0.0                  node.tgt_dataset.add(data=data[:rest],
   373         1       5600.0   5600.0      0.0                                       targets=targets[:rest].ravel())
   374         1       1600.0   1600.0      0.0                  continue
   375                                                       node.tgt_dataset.add(data=data[:rest], targets=targets[:rest])
   376                                           
   377                                                   # print(node.tgt_dataset.targets[1])
   378                                           
   379         1       7500.0   7500.0      0.0      timer.set_time_point("tgt_final ")
   380         2      12300.0   6150.0      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   381         1      24000.0  24000.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   382         1       8400.0   8400.0      0.0          node.getTotalDataRecv()))
   383         1       2900.0   2900.0      0.0      print("intersection size:{}".format(permute_length))
   384         1      29800.0  29800.0      0.0      print(timer)
   385                                           
   386         1  177550900.0    2e+08      0.4      file.close()

