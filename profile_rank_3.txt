Timer unit: 1e-09 s

Total time: 3.50646 s
File: /home/mSAID/main3.py
Function: main at line 42

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    42                                           def main():
    43                                               # dataset
    44         1       3800.0   3800.0      0.0      arguments = sys.argv[1:]
    45         1       2800.0   2800.0      0.0      examples = int(arguments[0])
    46         1       1300.0   1300.0      0.0      features = int(arguments[1])
    47         1       1400.0   1400.0      0.0      chunk = 100
    48                                               # sub_dataset
    49         1      40200.0  40200.0      0.0      nodes = MPI.COMM_WORLD.Get_size() - 1
    50         1       2100.0   2100.0      0.0      sub_examples = examples * 5 // 6
    51         1       1600.0   1600.0      0.0      sub_features = features // nodes
    52         1       1100.0   1100.0      0.0      targets_rank = 0
    53         1       1300.0   1300.0      0.0      target_length = 1
    54         1       4100.0   4100.0      0.0      folder_path = "./data/SVM_{}_{}".format(examples, features)
    55                                           
    56         1    2674500.0    3e+06      0.1      file = open("./data/log/SVM_{}_{}_log_{}.txt".format(examples, features,nodes), 'a')
    57         1       4200.0   4200.0      0.0      sys.stdout = file
    58         1       2500.0   2500.0      0.0      sys.stdout = sys.__stdout__
    59                                           
    60         1       2000.0   2000.0      0.0      secret_key = "secret_key"
    61                                           
    62                                               # shprg
    63         1       1800.0   1800.0      0.0      n = 2
    64         1       2000.0   2000.0      0.0      m = sub_features + target_length
    65         1       1500.0   1500.0      0.0      EQ = 128
    66         1       1500.0   1500.0      0.0      EP = 64
    67         1       3500.0   3500.0      0.0      q = 2**EQ
    68         1       2200.0   2200.0      0.0      p = 2**EP
    69         1      83400.0  83400.0      0.0      seedA = bytes(0x355678)
    70                                           
    71         1       2000.0   2000.0      0.0      precision_bits = 16
    72         1      15500.0  15500.0      0.0      encoder = FixedPointEncoder(precision_bits=precision_bits)
    73                                           
    74         1  253781700.0    3e+08      7.2      shprg = SHPRG(input=n, output=m, EQ=EQ, EP=EP, seedA=seedA)
    75                                           
    76         1       5100.0   5100.0      0.0      global_comm = MPI.COMM_WORLD
    77         1       7300.0   7300.0      0.0      global_rank = global_comm.Get_rank()
    78         1       3900.0   3900.0      0.0      global_size = global_comm.Get_size()
    79                                           
    80         1      19200.0  19200.0      0.0      global_grp = global_comm.Get_group()
    81         1      19800.0  19800.0      0.0      client_grp = global_grp.Excl([global_size - 1])
    82         1   55332000.0    6e+07      1.6      client_comm = global_comm.Create(client_grp)
    83         1       9100.0   9100.0      0.0      client_rank = None if client_comm == MPI.COMM_NULL else client_comm.Get_rank(
    84                                               )
    85         1       5900.0   5900.0      0.0      client_size = client_grp.Get_size()
    86                                           
    87         1       2200.0   2200.0      0.0      is_server = False
    88         1       2500.0   2500.0      0.0      if global_rank == global_size - 1:
    89         1       1700.0   1700.0      0.0          is_server = True
    90         1       1800.0   1800.0      0.0      server_rank = global_size - 1
    91                                           
    92         1      13400.0  13400.0      0.0      timer = Timer()
    93                                           
    94                                               #* initial node
    95         1       1400.0   1400.0      0.0      if is_server:
    96         1   14267700.0    1e+07      0.4          node = Node(None, None, global_comm, client_comm)
    97         1       2100.0   2100.0      0.0          temp_dataset = []
    98         1       2800.0   2800.0      0.0          temp_folder_path = folder_path + "/temp"
    99         4      10700.0   2675.0      0.0          for i in range(client_size):
   100         6      25500.0   4250.0      0.0              temp_path = "{}/SVM_{}_{}_{}-{}_temp.hdf5".format(
   101         3       4000.0   1333.3      0.0                  temp_folder_path, examples, features, i, nodes)
   102         6      13800.0   2300.0      0.0              temp_dataset.append(
   103         6   72549700.0    1e+07      2.1                  HDF5Dataset.new(file_path=temp_path,
   104         3       4500.0   1500.0      0.0                                    data_shape=(sub_features, ),
   105         3       3900.0   1300.0      0.0                                    target_shape=(),
   106         3       9200.0   3066.7      0.0                                    dtype=np.int64))
   107                                               else:
   108                                                   src_path = "{}/SVM_{}_{}_{}-{}.hdf5".format(folder_path, examples,
   109                                                                                               features, global_rank,
   110                                                                                               nodes)
   111                                                   src_dataset = HDF5Dataset(file_path=src_path)
   112                                                   tgt_folder_path = folder_path + "/tgt"
   113                                                   tgt_path = "{}/SVM_{}_{}_{}-{}_tgt.hdf5".format(
   114                                                       tgt_folder_path, examples, features, global_rank, nodes)
   115                                                   tgt_dataset = HDF5Dataset.new(file_path=tgt_path,
   116                                                                                   data_shape=(features, ),
   117                                                                                   target_shape=(),
   118                                                                                   dtype=np.int64)
   119                                                   node = Node(src_dataset, tgt_dataset, global_comm, client_comm)
   120                                           
   121                                               # print("start test...")
   122         1      15500.0  15500.0      0.0      timer.set_time_point("start_test")
   123         2      27000.0  13500.0      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   124         1      52200.0  52200.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   125         1      34200.0  34200.0      0.0          node.getTotalDataRecv()))
   126                                               
   127                                               # random permute
   128         1       1400.0   1400.0      0.0      if is_server:
   129         1       1700.0   1700.0      0.0          permutes =[]
   130         4       8700.0   2175.0      0.0          for _ in range(client_size):
   131         3      76700.0  25566.7      0.0              all_indices = list(range(sub_examples))
   132         3    6350500.0    2e+06      0.2              random.shuffle(all_indices)
   133         3       8700.0   2900.0      0.0              permutes.append(all_indices)
   134                                                   # print(random_permutes)
   135                                               else:
   136                                                   pass
   137                                           
   138                                               # sys.exit()
   139                                           
   140                                               # share_tras
   141         1       1300.0   1300.0      0.0      if is_server:
   142         1       9800.0   9800.0      0.0          all_deltas = [[] for _ in range(client_size)]
   143                                           
   144         1       2700.0   2700.0      0.0          def STsend_thread(rank):
   145                                                   # for rank in range(client_size):
   146                                                       for j in range(client_size):
   147                                                           if rank == j:
   148                                                               all_deltas[rank].append(None)
   149                                                               continue
   150                                                           delta = np.empty((sub_examples, n), dtype=object)
   151                                                           for k in range(n):
   152                                                               _delta = node.STsend(size=sub_examples,
   153                                                                                    permute=permutes[j],
   154                                                                                    recver=rank,
   155                                                                                    tag=j + k * 100,
   156                                                                                    Sip="127.0.0.1:12233")
   157                                                               delta[:, k] = _delta
   158                                                           all_deltas[rank].append(delta)
   159                                           
   160         2  879620500.0    4e+08     25.1          with ThreadPoolExecutor(max_workers=client_size) as executor:
   161         1  683867300.0    7e+08     19.5              executor.map(STsend_thread, range(client_size))
   162                                               else:
   163                                                   a_s = []
   164                                                   b_s = []
   165                                                   for rank in range(client_size):
   166                                                       if client_rank == rank:
   167                                                           a_s.append(None)
   168                                                           b_s.append(None)
   169                                                           continue
   170                                                       a = np.empty((sub_examples, n), dtype=object)
   171                                                       b = np.empty((sub_examples, n), dtype=object)
   172                                                       for k in range(n):
   173                                                           _a, _b = node.STrecv(size=sub_examples,
   174                                                                                sender=server_rank,
   175                                                                                tag=rank + k * 100,
   176                                                                                Sip="127.0.0.1:12233")
   177                                                           a[:, k] = _a
   178                                                           b[:, k] = _b
   179                                                       a_s.append(a)
   180                                                       b_s.append(b)
   181                                           
   182         1      13500.0  13500.0      0.0      timer.set_time_point("share_tras")
   183         2      26200.0  13100.0      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   184         1      46000.0  46000.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   185         1      15300.0  15300.0      0.0          node.getTotalDataRecv()))
   186                                               
   187                                               # sys.exit()    
   188                                           
   189                                               #* encrypted ID
   190         1       1800.0   1800.0      0.0      if is_server:
   191         1       1700.0   1700.0      0.0          id_enc = None
   192                                               else:
   193                                                   prf = PRF(secret_key=secret_key)
   194                                                   id_enc = np.vectorize(prf.compute)(node.src_dataset.ids[...])
   195         1    2460800.0    2e+06      0.1      id_enc_gather = node.gather(id_enc, server_rank)
   196                                           
   197                                               #* server-aid PSI
   198         1       1900.0   1900.0      0.0      if is_server:
   199         2   35391800.0    2e+07      1.0          final_permutes, permute_length = node.find_intersection_indices(
   200         1       3000.0   3000.0      0.0              id_enc_gather[:-1])
   201                                               else:
   202                                                   pass
   203                                               # sys.exit()
   204                                           
   205                                               #* find permute
   206         1       1100.0   1100.0      0.0      if is_server:
   207         1       2900.0   2900.0      0.0          def find_permute(permute, final_permute):
   208                                                       pre_permute = [0] * len(all_indices)
   209                                                       for i in range(len(all_indices)):
   210                                                           pre_permute[permute[i]] = final_permute[i]
   211                                                       return pre_permute
   212         1       1200.0   1200.0      0.0          pre_permutes = []
   213         4       5900.0   1475.0      0.0          for i in range(client_size):
   214         3     709100.0 236366.7      0.0              pre_permutes.append(find_permute(permutes[i], final_permutes[i]))
   215         1       1100.0   1100.0      0.0          pre_permutes.append(None)
   216                                           
   217         1     296800.0 296800.0      0.0          print(pre_permutes)
   218         1   12261600.0    1e+07      0.3          node.scatter(pre_permutes, server_rank)
   219                                               else:
   220                                                   pre_permute = node.scatter(None, server_rank)
   221                                                   print(pre_permute)
   222                                           
   223                                               # sys.exit()
   224                                           
   225                                               #* seeds generation
   226         1       1500.0   1500.0      0.0      if is_server:
   227         1       1000.0   1000.0      0.0          pass
   228                                               else:
   229                                                   seeds = [(None if i == client_rank else np.array(
   230                                                       [[k + j * 10 + i * 100 + client_rank * 1000 for k in range(n)]
   231                                                        for j in range(sub_examples)]))
   232                                                            for i in range(client_size)]  #! test
   233                                                   
   234                                                   # seeds = [(None if i == client_rank else SHPRG.genMatrixAES128(seed=token_bytes(16),n=sub_examples,m=n,EQ=EQ) ) for i in range(client_size)]
   235                                           
   236         1       8800.0   8800.0      0.0      timer.set_time_point("server_psi")
   237         2      13800.0   6900.0      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   238         1      25600.0  25600.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   239         1       9400.0   9400.0      0.0          node.getTotalDataRecv()))
   240                                               
   241                                               # sys.exit()
   242                                           
   243                                               # seeds share
   244         1       1000.0   1000.0      0.0      if is_server:
   245         1       1000.0   1000.0      0.0          pass
   246                                               else:
   247                                                   seeds_exchanged = node.alltoall(seeds, in_clients=True)
   248                                           
   249         1       4000.0   4000.0      0.0      timer.set_time_point("seed_share")
   250         2       5500.0   2750.0      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   251         1       9200.0   9200.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   252         1       7900.0   7900.0      0.0          node.getTotalDataRecv()))
   253                                           
   254                                           
   255                                               # permute and share
   256         1       1100.0   1100.0      0.0      if is_server:
   257         1       1400.0   1400.0      0.0          seeds_exchanged = None
   258                                               else:
   259                                                   for i in range(client_size):
   260                                                       if client_rank == i:
   261                                                           continue
   262                                                       seeds_exchanged[i] = (seeds_exchanged[i] - a_s[i]) % q
   263         1    5007400.0    5e+06      0.1      seeds_share_gather = node.gather(seeds_exchanged, server_rank)
   264                                           
   265         1       2500.0   2500.0      0.0      if is_server:
   266         4      10200.0   2550.0      0.0          for i in range(client_size):
   267        12      24900.0   2075.0      0.0              for rank in range(client_size):
   268         9      12600.0   1400.0      0.0                  if i == rank:
   269         3       5200.0   1733.3      0.0                      continue
   270         6    1139900.0 189983.3      0.0                  seeds_share_gather[i][rank] = (
   271        12    1372000.0 114333.3      0.0                      seeds_share_gather[i][rank][permutes[rank]] +
   272        12      20800.0   1733.3      0.0                      all_deltas[i][rank]) % q
   273         1       1400.0   1400.0      0.0          seed1s_s = seeds_share_gather
   274                                               else:
   275                                                   seed2s = b_s
   276                                           
   277         1      11700.0  11700.0      0.0      timer.set_time_point("perm_share")
   278         2      18200.0   9100.0      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   279         1      40500.0  40500.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   280         1       8900.0   8900.0      0.0          node.getTotalDataRecv()))
   281                                               
   282                                           
   283                                               #* share
   284         2       3400.0   1700.0      0.0      round_examples = sub_examples // chunk + (1 if sub_examples % chunk != 0
   285         1        900.0    900.0      0.0                                                else 0)
   286         1       1000.0   1000.0      0.0      if is_server:
   287         1       2300.0   2300.0      0.0          def sharesend_thread(rank):
   288                                                       for i in range(round_examples):
   289                                                           recv = node.recv(source=rank, tag=i)
   290                                                           temp_dataset[rank].add(data=recv[0], targets=recv[1])
   291                                           
   292         2  470196000.0    2e+08     13.4          with ThreadPoolExecutor(max_workers=client_size) as executor:
   293         1    1481300.0    1e+06      0.0              executor.map(sharesend_thread, range(client_size))
   294                                               else:
   295                                                   with_targets = node.src_dataset.with_targets
   296                                           
   297                                                   data_to_server = np.empty((chunk, sub_features), dtype=np.int64)
   298                                                   targets_to_server = np.empty(
   299                                                       (chunk, target_length), dtype=np.int64) if with_targets else None
   300                                                   index = 0
   301                                           
   302                                                   for i in range(round_examples):
   303                                                       rest = min(sub_examples - index, chunk)
   304                                                       for j in range(rest):
   305                                                           perm_index = pre_permute[index + j]
   306                                                           data_to_server[j] = encoder.encode(node.src_dataset.data[perm_index])
   307                                                           if with_targets:
   308                                                               targets_to_server[j] = encoder.encode(node.src_dataset.targets[perm_index].reshape((1, target_length)))
   309                                                       for k in range(client_size):
   310                                                           if k == client_rank:
   311                                                               continue
   312                                                           output_prg = mod_range(
   313                                                               shprg.genRandom(seeds[k][index:index + rest]),
   314                                                               p).astype(np.int64)
   315                                                           data_to_server[:rest] -= output_prg[:, :sub_features]
   316                                                           if with_targets:
   317                                                               targets_to_server[:rest] -= output_prg[:, sub_features:sub_features +
   318                                                                                    target_length]
   319                                                       index += rest
   320                                                       if target_length == 1:
   321                                                           node.send(
   322                                                               (data_to_server[:rest], targets_to_server[:rest].ravel()
   323                                                                if with_targets else None),
   324                                                               dest=server_rank,
   325                                                               tag=i)
   326                                                           continue
   327                                                       node.send((data_to_server[:rest],
   328                                                                  targets_to_server[:rest] if with_targets else None),
   329                                                                 dest=server_rank,
   330                                                                 tag=i)
   331                                           
   332         1      17100.0  17100.0      0.0      timer.set_time_point("dset_share")
   333         2      26300.0  13150.0      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   334         1      46900.0  46900.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   335         1      18400.0  18400.0      0.0          node.getTotalDataRecv()))
   336                                               
   337                                               # sys.exit()
   338                                           
   339                                               # share intersection size
   340         1       2000.0   2000.0      0.0      if is_server:
   341         1       2400.0   2400.0      0.0          pass
   342                                               else:
   343                                                   permute_length = None
   344         1     113600.0 113600.0      0.0      permute_length = global_comm.bcast(permute_length, root=server_rank)
   345                                           
   346                                               # sys.exit()
   347                                           
   348                                               # tgt dataset server send
   349         1       4300.0   4300.0      0.0      round_inter = permute_length // chunk + (1 if permute_length % chunk != 0
   350                                                                                        else 0)
   351         1       1900.0   1900.0      0.0      if is_server:
   352         1       4100.0   4100.0      0.0          def tgt_dataset_send(rank):
   353                                                   # for rank in range(client_size):
   354                                                       with_targets = (rank == targets_rank)
   355                                           
   356                                                       data_to_client = np.empty((chunk, sub_features), dtype=np.int64)
   357                                                       targets_to_client = np.empty(
   358                                                           (chunk,
   359                                                            target_length), dtype=np.int64) if with_targets else None
   360                                                       index = 0
   361                                           
   362                                                       for i in range(round_inter):
   363                                                           rest = min(permute_length - index, chunk)
   364                                                           for j in range(rest):
   365                                                               perm_index = permutes[rank][index + j]
   366                                                               data_to_client[j] = temp_dataset[rank].data[perm_index]
   367                                                               if with_targets:
   368                                                                   targets_to_client[j] = temp_dataset[rank].targets[
   369                                                                       perm_index].reshape((1, target_length))
   370                                                           for k in range(client_size):
   371                                                               if k == rank:
   372                                                                   continue
   373                                                               output_prg = mod_range(
   374                                                                   shprg.genRandom(seed1s_s[k][rank][index:index + rest]),
   375                                                                   p).astype(np.int64)
   376                                                               data_to_client[:rest] += output_prg[:, :sub_features]
   377                                                               if with_targets:
   378                                                                   targets_to_client[:rest] += output_prg[:, sub_features:sub_features+target_length]
   379                                                           index += rest
   380                                                           if target_length == 1:
   381                                                               node.send(
   382                                                                   (data_to_client[:rest], targets_to_client[:rest].ravel()
   383                                                                   if with_targets else None),
   384                                                                   dest=rank,
   385                                                                   tag=i)
   386                                                               continue
   387                                                           node.send(
   388                                                               (data_to_client[:rest],
   389                                                                   targets_to_client[:rest] if with_targets else None),
   390                                                               dest=rank,
   391                                                               tag=i)
   392                                           
   393         2 1002901200.0    5e+08     28.6          with ThreadPoolExecutor(max_workers=client_size) as executor:
   394         1    3112800.0    3e+06      0.1              executor.map(tgt_dataset_send, range(client_size))
   395                                               else:
   396                                                   index = [0] * client_size
   397                                                   data = np.empty((chunk, features), dtype=np.int64)
   398                                                   targets = np.empty((chunk,target_length), dtype=np.int64)
   399                                                   for i in range(round_inter):
   400                                                       recv = node.recv(source=server_rank, tag=i)
   401                                                       rest = len(recv[0])
   402                                                       # print(rest)
   403                                                       for rank in range(client_size):
   404                                                           if client_rank == rank:
   405                                                               data[:rest, rank * sub_features:(rank + 1) *
   406                                                                    sub_features] = recv[0]
   407                                                               if rank == targets_rank:
   408                                                                   targets[:rest]= recv[1].reshape((rest, target_length))
   409                                                               continue
   410                                                           output_prg = mod_range(
   411                                                               shprg.genRandom(seed2s[rank][index[rank]:index[rank] + rest]),
   412                                                                 p).astype(np.int64)
   413                                                           data[:rest, rank * sub_features:(rank + 1) *
   414                                                                sub_features] = output_prg[:, :sub_features]
   415                                                           if rank == targets_rank:
   416                                                               targets[:rest] = output_prg[:, sub_features:sub_features+target_length]
   417                                                           index[rank] += rest
   418                                                       if target_length == 1:
   419                                                           node.tgt_dataset.add(data=data[:rest],
   420                                                                                targets=targets[:rest].ravel())
   421                                                           continue
   422                                                       node.tgt_dataset.add(data=data[:rest], targets=targets[:rest])
   423                                           
   424         1      11800.0  11800.0      0.0      timer.set_time_point("tgt_final ")
   425         2      23900.0  11950.0      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   426         1      47800.0  47800.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   427         1      14200.0  14200.0      0.0          node.getTotalDataRecv()))
   428         1       6400.0   6400.0      0.0      print("intersection size:{}".format(permute_length))
   429         1      51800.0  51800.0      0.0      print(timer)
   430                                           
   431         1     322600.0 322600.0      0.0      file.close()

