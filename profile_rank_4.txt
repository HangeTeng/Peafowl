Timer unit: 1e-09 s

Total time: 117.478 s
File: /home/ubuntu/mSAID/main.py
Function: main at line 41

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    41                                           def main():
    42                                               # dataset
    43         1       2024.0   2024.0      0.0      arguments = sys.argv[1:]
    44         1        932.0    932.0      0.0      examples = int(arguments[0])
    45         1        450.0    450.0      0.0      features = int(arguments[1])
    46         1        231.0    231.0      0.0      chunk = 3000
    47                                               # sub_dataset
    48         1    1335348.0    1e+06      0.0      nodes = MPI.COMM_WORLD.Get_size() - 1
    49         1        721.0    721.0      0.0      sub_examples = examples * 5 // 6
    50         1        261.0    261.0      0.0      sub_features = features // nodes
    51         1        171.0    171.0      0.0      targets_rank = 0
    52         1        141.0    141.0      0.0      target_length = 1
    53         1       1462.0   1462.0      0.0      folder_path = "./data/SVM_{}_{}".format(examples, features)
    54                                           
    55         1      28413.0  28413.0      0.0      file = open("./data/log/SVM_{}_{}_log_{}.txt".format(examples, features,nodes), 'a')
    56         1        612.0    612.0      0.0      sys.stdout = file
    57                                               # sys.stdout = sys.__stdout__
    58                                           
    59         1        201.0    201.0      0.0      secret_key = "secret_key"
    60                                           
    61                                               # shprg
    62         1        171.0    171.0      0.0      n = 8
    63         1        421.0    421.0      0.0      m = sub_features + target_length
    64         1        160.0    160.0      0.0      EQ = 128
    65         1        140.0    140.0      0.0      EP = 64
    66         1       1153.0   1153.0      0.0      q = 2**EQ
    67         1        601.0    601.0      0.0      p = 2**EP
    68         1       6041.0   6041.0      0.0      seedA = bytes(0x355678)
    69                                           
    70         1        191.0    191.0      0.0      precision_bits = 16
    71         1       2645.0   2645.0      0.0      encoder = FixedPointEncoder(precision_bits=precision_bits)
    72                                           
    73         1  440238837.0    4e+08      0.4      shprg = SHPRG(input=n, output=m, EQ=EQ, EP=EP, seedA=seedA)
    74                                           
    75         1       1333.0   1333.0      0.0      global_comm = MPI.COMM_WORLD
    76         1       3466.0   3466.0      0.0      global_rank = global_comm.Get_rank()
    77         1        692.0    692.0      0.0      global_size = global_comm.Get_size()
    78                                           
    79         1       9688.0   9688.0      0.0      global_grp = global_comm.Get_group()
    80         1       5400.0   5400.0      0.0      client_grp = global_grp.Excl([global_size - 1])
    81         1      62096.0  62096.0      0.0      client_comm = global_comm.Create(client_grp)
    82         1       1213.0   1213.0      0.0      client_rank = None if client_comm == MPI.COMM_NULL else client_comm.Get_rank(
    83                                               )
    84         1        952.0    952.0      0.0      client_size = client_grp.Get_size()
    85                                           
    86         1        200.0    200.0      0.0      is_server = False
    87         1        451.0    451.0      0.0      if global_rank == global_size - 1:
    88                                                   is_server = True
    89         1        251.0    251.0      0.0      server_rank = global_size - 1
    90                                           
    91         1       3346.0   3346.0      0.0      timer = Timer()
    92                                           
    93                                               #* initial node
    94         1        390.0    390.0      0.0      if is_server:
    95                                                   node = Node(None, None, global_comm, client_comm)
    96                                                   temp_dataset = []
    97                                                   temp_folder_path = folder_path + "/temp"
    98                                                   for i in range(client_size):
    99                                                       temp_path = "{}/SVM_{}_{}_{}-{}_temp.hdf5".format(
   100                                                           temp_folder_path, examples, features, i, nodes)
   101                                                       temp_dataset.append(
   102                                                           HDF5Dataset.empty(file_path=temp_path,
   103                                                                             data_shape=(sub_features, ),
   104                                                                             targets_shape=(),
   105                                                                             dtype=np.int64))
   106                                               else:
   107         2       2295.0   1147.5      0.0          src_path = "{}/SVM_{}_{}_{}-{}.hdf5".format(folder_path, examples,
   108         1        200.0    200.0      0.0                                                      features, global_rank,
   109         1        140.0    140.0      0.0                                                      nodes)
   110         1     839552.0 839552.0      0.0          src_dataset = HDF5Dataset(file_path=src_path)
   111         1        440.0    440.0      0.0          tgt_folder_path = folder_path + "/tgt"
   112         2       6002.0   3001.0      0.0          tgt_path = "{}/SVM_{}_{}_{}-{}_tgt.hdf5".format(
   113         1        310.0    310.0      0.0              tgt_folder_path, examples, features, global_rank, nodes)
   114         2    3266114.0    2e+06      0.0          tgt_dataset = HDF5Dataset.empty(file_path=tgt_path,
   115         1        231.0    231.0      0.0                                          data_shape=(features, ),
   116         1        160.0    160.0      0.0                                          targets_shape=(),
   117         1        811.0    811.0      0.0                                          dtype=np.int64)
   118         1     478856.0 478856.0      0.0          node = Node(src_dataset, tgt_dataset, global_comm, client_comm)
   119                                           
   120                                               # print("start test...")
   121         1       5129.0   5129.0      0.0      timer.set_time_point("start_test")
   122         2      10640.0   5320.0      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   123         1      14718.0  14718.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   124         1      12152.0  12152.0      0.0          node.getTotalDataRecv()))
   125                                           
   126                                               #* encrypted ID
   127         1        341.0    341.0      0.0      if is_server:
   128                                                   id_enc = None
   129                                               else:
   130         1       4398.0   4398.0      0.0          prf = PRF(secret_key=secret_key)
   131         1   25585786.0    3e+07      0.0          id_enc = np.vectorize(prf.compute)(node.src_dataset.ids[...])
   132         1    1227617.0    1e+06      0.0      id_enc_gather = node.gather(id_enc, server_rank)
   133                                           
   134                                               #* server-aid PSI
   135         1        280.0    280.0      0.0      if is_server:
   136                                                   permutes, permute_length = node.find_intersection_indices(
   137                                                       id_enc_gather[:-1])
   138                                               else:
   139         1        491.0    491.0      0.0          pass
   140                                           
   141                                               #* seeds generation
   142         1        241.0    241.0      0.0      if is_server:
   143                                                   pass
   144                                               else:
   145         2  158923492.0    8e+07      0.1          seeds = [(None if i == client_rank else np.array(
   146                                                       [[k + j * 10 + i * 100 + client_rank * 1000 for k in range(n)]
   147                                                        for j in range(sub_examples)]))
   148         1        882.0    882.0      0.0                   for i in range(client_size)]  #! test
   149                                                   # seeds = [(None if i == client_rank else SHPRG.genMatrixAES128(seed=token_bytes(16),n=sub_examples,m=n,EQ=EQ) ) for i in range(client_size)]
   150                                           
   151         1       6913.0   6913.0      0.0      timer.set_time_point("server_psi")
   152         2      14998.0   7499.0      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   153         1      33933.0  33933.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   154         1       5981.0   5981.0      0.0          node.getTotalDataRecv()))
   155                                           
   156                                               #* share
   157         1       1663.0   1663.0      0.0      round_examples = sub_examples // chunk + (1 if sub_examples % chunk != 0
   158                                                                                         else 0)
   159         1        921.0    921.0      0.0      if is_server:
   160                                                   def sharesend_thread(rank):
   161                                                       for i in range(round_examples):
   162                                                           recv = node.recv(source=rank, tag=i)
   163                                                           temp_dataset[rank].add(data=recv[0], targets=recv[1])
   164                                           
   165                                                   with ThreadPoolExecutor(max_workers=client_size) as executor:
   166                                                       executor.map(sharesend_thread, range(client_size))
   167                                               else:
   168         1       1603.0   1603.0      0.0          with_targets = node.src_dataset.with_targets
   169                                           
   170         1      24506.0  24506.0      0.0          data_to_server = np.empty((chunk, sub_features), dtype=np.int64)
   171         2        611.0    305.5      0.0          targets_to_server = np.empty(
   172         2        571.0    285.5      0.0              (chunk, target_length), dtype=np.int64) if with_targets else None
   173         1        941.0    941.0      0.0          index = 0
   174                                           
   175         5       5520.0   1104.0      0.0          for i in range(round_examples):
   176         4      14046.0   3511.5      0.0              rest = min(sub_examples - index, chunk)
   177         4   63719324.0    2e+07      0.1              data_to_server[:rest] = encoder.encode(node.src_dataset.data[index:index + rest])
   178         4       7825.0   1956.2      0.0              if with_targets:
   179                                                           targets_to_server[:rest] = encoder.encode(
   180                                                               node.src_dataset.targets[index:index + rest]).reshape(
   181                                                                   rest, target_length)
   182        24      54320.0   2263.3      0.0              for k in range(client_size):
   183        20      27229.0   1361.5      0.0                  if k == client_rank:
   184         4        722.0    180.5      0.0                      continue
   185        48 2682097477.0    6e+07      2.3                  output_prg = mod_range(
   186        16        3e+10    2e+09     23.6                      shprg.genRandom(seeds[k][index:index + rest]),
   187        32 1646485185.0    5e+07      1.4                      p).astype(np.int64)
   188        16   49530872.0    3e+06      0.0                  data_to_server[:rest] -= output_prg[:, :sub_features]
   189        16      32811.0   2050.7      0.0                  if with_targets:
   190                                                               targets_to_server[:rest] -= output_prg[:, sub_features:sub_features +
   191                                                                                    target_length]
   192         4       4758.0   1189.5      0.0              index += rest
   193         4       2184.0    546.0      0.0              if target_length == 1:
   194         8   47583365.0    6e+06      0.0                  node.send(
   195        12       8775.0    731.2      0.0                      (data_to_server[:rest], targets_to_server[:rest].ravel()
   196         8       1243.0    155.4      0.0                       if with_targets else None),
   197         4       1042.0    260.5      0.0                      dest=server_rank,
   198         4        521.0    130.2      0.0                      tag=i)
   199         4       5079.0   1269.8      0.0                  continue
   200                                                       node.send((data_to_server[:rest],
   201                                                                  targets_to_server[:rest] if with_targets else None),
   202                                                                 dest=server_rank,
   203                                                                 tag=i)
   204                                           
   205         1       5530.0   5530.0      0.0      timer.set_time_point("dset_share")
   206         2      15558.0   7779.0      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   207         1      32772.0  32772.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   208         1       5982.0   5982.0      0.0          node.getTotalDataRecv()))
   209                                           
   210                                               # seeds share
   211         1        701.0    701.0      0.0      if is_server:
   212                                                   pass
   213                                               else:
   214         1 1755068679.0    2e+09      1.5          seeds_exchanged = node.alltoall(seeds, in_clients=True)
   215                                           
   216         1       4979.0   4979.0      0.0      timer.set_time_point("seed_share")
   217         2      13195.0   6597.5      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   218         1      32831.0  32831.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   219         1       6412.0   6412.0      0.0          node.getTotalDataRecv()))
   220                                           
   221                                               # share_tras
   222         1        682.0    682.0      0.0      if is_server:
   223                                                   all_deltas = [[] for _ in range(client_size)]
   224                                           
   225                                                   def STsend_thread(rank):
   226                                                       for j in range(client_size):
   227                                                           if rank == j:
   228                                                               all_deltas[rank].append(None)
   229                                                               continue
   230                                                           delta = np.empty((sub_examples, n), dtype=object)
   231                                                           for k in range(n):
   232                                                               _delta = node.STsend(size=sub_examples,
   233                                                                                    permute=permutes[j],
   234                                                                                    recver=rank,
   235                                                                                    tag=j + k * 100)
   236                                                               delta[:, k] = _delta
   237                                                           all_deltas[rank].append(delta)
   238                                           
   239                                                   with ThreadPoolExecutor(max_workers=client_size) as executor:
   240                                                       executor.map(STsend_thread, range(client_size))
   241                                               else:
   242         1        210.0    210.0      0.0          a_s = []
   243         1        350.0    350.0      0.0          b_s = []
   244         6       4128.0    688.0      0.0          for rank in range(client_size):
   245         5       4249.0    849.8      0.0              if client_rank == rank:
   246         1        741.0    741.0      0.0                  a_s.append(None)
   247         1        251.0    251.0      0.0                  b_s.append(None)
   248         1        171.0    171.0      0.0                  continue
   249         4     343331.0  85832.8      0.0              a = np.empty((sub_examples, n), dtype=object)
   250         4     335779.0  83944.8      0.0              b = np.empty((sub_examples, n), dtype=object)
   251        36      51158.0   1421.1      0.0              for k in range(n):
   252        64        5e+10    8e+08     41.1                  _a, _b = node.STrecv(size=sub_examples,
   253        32       7234.0    226.1      0.0                                       sender=server_rank,
   254        32      21712.0    678.5      0.0                                       tag=rank + k * 100)
   255        32    1503375.0  46980.5      0.0                  a[:, k] = _a
   256        32    1302740.0  40710.6      0.0                  b[:, k] = _b
   257         4       3527.0    881.8      0.0              a_s.append(a)
   258         4       3135.0    783.8      0.0              b_s.append(b)
   259                                           
   260         1       5621.0   5621.0      0.0      timer.set_time_point("share_tras")
   261         2      15318.0   7659.0      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   262         1      23755.0  23755.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   263         1       5811.0   5811.0      0.0          node.getTotalDataRecv()))
   264                                           
   265                                               # permute and share
   266         1        471.0    471.0      0.0      if is_server:
   267                                                   seeds_exchanged = None
   268                                               else:
   269         6       5760.0    960.0      0.0          for i in range(client_size):
   270         5       3717.0    743.4      0.0              if client_rank == i:
   271         1        170.0    170.0      0.0                  continue
   272         4   26944238.0    7e+06      0.0              seeds_exchanged[i] = (seeds_exchanged[i] - a_s[i]) % q
   273         1  344581130.0    3e+08      0.3      seeds_share_gather = node.gather(seeds_exchanged, server_rank)
   274                                           
   275         1        341.0    341.0      0.0      if is_server:
   276                                                   for i in range(client_size):
   277                                                       for rank in range(client_size):
   278                                                           if i == rank:
   279                                                               continue
   280                                                           seeds_share_gather[i][rank] = (
   281                                                               seeds_share_gather[i][rank][permutes[rank]] +
   282                                                               all_deltas[i][rank]) % q
   283                                                   seed1s_s = seeds_share_gather
   284                                               else:
   285         1        251.0    251.0      0.0          seed2s = b_s
   286                                           
   287         1       6362.0   6362.0      0.0      timer.set_time_point("perm_share")
   288         2       9607.0   4803.5      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   289         1      20268.0  20268.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   290         1       5911.0   5911.0      0.0          node.getTotalDataRecv()))
   291                                           
   292                                               # share intersection size
   293         1        591.0    591.0      0.0      if is_server:
   294                                                   pass
   295                                               else:
   296         1        280.0    280.0      0.0          permute_length = None
   297         1  268682417.0    3e+08      0.2      permute_length = global_comm.bcast(permute_length, root=server_rank)
   298                                           
   299                                               # sys.exit()
   300                                           
   301                                               # tgt dataset server send
   302         1       2345.0   2345.0      0.0      round_inter = permute_length // chunk + (1 if permute_length % chunk != 0
   303                                                                                        else 0)
   304         1        712.0    712.0      0.0      if is_server:
   305                                                   def tgt_dataset_send(rank):
   306                                                   # for rank in range(client_size):
   307                                                       with_targets = (rank == targets_rank)
   308                                           
   309                                                       data_to_client = np.empty((chunk, sub_features), dtype=np.int64)
   310                                                       targets_to_client = np.empty(
   311                                                           (chunk,
   312                                                            target_length), dtype=np.int64) if with_targets else None
   313                                                       index = 0
   314                                           
   315                                                       for i in range(round_inter):
   316                                                           rest = min(permute_length - index, chunk)
   317                                                           for j in range(rest):
   318                                                               perm_index = permutes[rank][index + j]
   319                                                               data_to_client[j] = temp_dataset[rank].data[perm_index]
   320                                                               if with_targets:
   321                                                                   targets_to_client[j] = temp_dataset[rank].targets[
   322                                                                       perm_index].reshape((1, target_length))
   323                                                           for k in range(client_size):
   324                                                               if k == rank:
   325                                                                   continue
   326                                                               output_prg = mod_range(
   327                                                                   shprg.genRandom(seed1s_s[k][rank][index:index + rest]),
   328                                                                   p).astype(np.int64)
   329                                                               data_to_client[:rest] += output_prg[:, :sub_features]
   330                                                               if with_targets:
   331                                                                   targets_to_client[:rest] += output_prg[:, sub_features:sub_features+target_length]
   332                                                           index += rest
   333                                                           if target_length == 1:
   334                                                               node.send(
   335                                                                   (data_to_client[:rest], targets_to_client[:rest].ravel()
   336                                                                   if with_targets else None),
   337                                                                   dest=rank,
   338                                                                   tag=i)
   339                                                               continue
   340                                                           node.send(
   341                                                               (data_to_client[:rest],
   342                                                                   targets_to_client[:rest] if with_targets else None),
   343                                                               dest=rank,
   344                                                               tag=i)
   345                                           
   346                                                   with ThreadPoolExecutor(max_workers=client_size) as executor:
   347                                                       executor.map(tgt_dataset_send, range(client_size))
   348                                               else:
   349         1       2154.0   2154.0      0.0          index = [0] * client_size
   350         1      30207.0  30207.0      0.0          data = np.empty((chunk, features), dtype=np.int64)
   351         1       1763.0   1763.0      0.0          targets = np.empty((chunk,target_length), dtype=np.int64)
   352         3       3777.0   1259.0      0.0          for i in range(round_inter):
   353         2        1e+10    6e+09     11.1              recv = node.recv(source=server_rank, tag=i)
   354         2       4028.0   2014.0      0.0              rest = len(recv[0])
   355                                                       # print(rest)
   356        12      16711.0   1392.6      0.0              for rank in range(client_size):
   357        10      10229.0   1022.9      0.0                  if client_rank == rank:
   358         4    4298297.0    1e+06      0.0                      data[:rest, rank * sub_features:(rank + 1) *
   359         4       2084.0    521.0      0.0                           sub_features] = recv[0]
   360         2       3477.0   1738.5      0.0                      if rank == targets_rank:
   361                                                                   targets[:rest]= recv[1].reshape((rest, target_length))
   362         2       1764.0    882.0      0.0                      continue
   363        24 1204949316.0    5e+07      1.0                  output_prg = mod_range(
   364         8        2e+10    2e+09     16.1                      shprg.genRandom(seed2s[rank][index[rank]:index[rank] + rest]),
   365        16  733956894.0    5e+07      0.6                        p).astype(np.int64)
   366        16   25460385.0    2e+06      0.0                  data[:rest, rank * sub_features:(rank + 1) *
   367        16      73005.0   4562.8      0.0                       sub_features] = output_prg[:, :sub_features]
   368         8      21219.0   2652.4      0.0                  if rank == targets_rank:
   369         2      48421.0  24210.5      0.0                      targets[:rest] = output_prg[:, sub_features:sub_features+target_length]
   370         8      25868.0   3233.5      0.0                  index[rank] += rest
   371         2       2065.0   1032.5      0.0              if target_length == 1:
   372         4  169203115.0    4e+07      0.1                  node.tgt_dataset.add(data=data[:rest],
   373         2      17433.0   8716.5      0.0                                       targets=targets[:rest].ravel())
   374         2       1042.0    521.0      0.0                  continue
   375                                                       node.tgt_dataset.add(data=data[:rest], targets=targets[:rest])
   376                                           
   377                                                   # print(node.tgt_dataset.targets[1])
   378                                           
   379         1       4689.0   4689.0      0.0      timer.set_time_point("tgt_final ")
   380         2      12152.0   6076.0      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   381         1      32842.0  32842.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   382         1       5651.0   5651.0      0.0          node.getTotalDataRecv()))
   383         1       1774.0   1774.0      0.0      print("intersection size:{}".format(permute_length))
   384         1      21761.0  21761.0      0.0      print(timer)
   385                                           
   386         1      56826.0  56826.0      0.0      file.close()

