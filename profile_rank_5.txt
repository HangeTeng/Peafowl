Timer unit: 1e-09 s

Total time: 190.796 s
File: /home/ubuntu/mSAID/main.py
Function: main at line 41

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    41                                           def main():
    42                                               # dataset
    43         1       1213.0   1213.0      0.0      arguments = sys.argv[1:]
    44         1        892.0    892.0      0.0      examples = int(arguments[0])
    45         1        420.0    420.0      0.0      features = int(arguments[1])
    46         1        241.0    241.0      0.0      chunk = 3000
    47                                               # sub_dataset
    48         1    1339687.0    1e+06      0.0      nodes = MPI.COMM_WORLD.Get_size() - 1
    49         1        682.0    682.0      0.0      sub_examples = examples * 5 // 6
    50         1        240.0    240.0      0.0      sub_features = features // nodes
    51         1        170.0    170.0      0.0      targets_rank = 0
    52         1        170.0    170.0      0.0      target_length = 1
    53         1       1443.0   1443.0      0.0      folder_path = "./data/SVM_{}_{}".format(examples, features)
    54                                           
    55         1      25578.0  25578.0      0.0      file = open("./data/log/SVM_{}_{}_log_{}.txt".format(examples, features,nodes), 'a')
    56         1        601.0    601.0      0.0      sys.stdout = file
    57                                               # sys.stdout = sys.__stdout__
    58                                           
    59         1        180.0    180.0      0.0      secret_key = "secret_key"
    60                                           
    61                                               # shprg
    62         1        140.0    140.0      0.0      n = 8
    63         1        400.0    400.0      0.0      m = sub_features + target_length
    64         1        161.0    161.0      0.0      EQ = 128
    65         1        140.0    140.0      0.0      EP = 64
    66         1        972.0    972.0      0.0      q = 2**EQ
    67         1        601.0    601.0      0.0      p = 2**EP
    68         1       6031.0   6031.0      0.0      seedA = bytes(0x355678)
    69                                           
    70         1        200.0    200.0      0.0      precision_bits = 16
    71         1       2395.0   2395.0      0.0      encoder = FixedPointEncoder(precision_bits=precision_bits)
    72                                           
    73         1  427981277.0    4e+08      0.2      shprg = SHPRG(input=n, output=m, EQ=EQ, EP=EP, seedA=seedA)
    74                                           
    75         1       1443.0   1443.0      0.0      global_comm = MPI.COMM_WORLD
    76         1       6883.0   6883.0      0.0      global_rank = global_comm.Get_rank()
    77         1        841.0    841.0      0.0      global_size = global_comm.Get_size()
    78                                           
    79         1       5841.0   5841.0      0.0      global_grp = global_comm.Get_group()
    80         1       5781.0   5781.0      0.0      client_grp = global_grp.Excl([global_size - 1])
    81         1   12295080.0    1e+07      0.0      client_comm = global_comm.Create(client_grp)
    82         1       5340.0   5340.0      0.0      client_rank = None if client_comm == MPI.COMM_NULL else client_comm.Get_rank(
    83                                               )
    84         1       1483.0   1483.0      0.0      client_size = client_grp.Get_size()
    85                                           
    86         1        180.0    180.0      0.0      is_server = False
    87         1        431.0    431.0      0.0      if global_rank == global_size - 1:
    88         1        151.0    151.0      0.0          is_server = True
    89         1        251.0    251.0      0.0      server_rank = global_size - 1
    90                                           
    91         1       4138.0   4138.0      0.0      timer = Timer()
    92                                           
    93                                               #* initial node
    94         1        271.0    271.0      0.0      if is_server:
    95         1    3152520.0    3e+06      0.0          node = Node(None, None, global_comm, client_comm)
    96         1        331.0    331.0      0.0          temp_dataset = []
    97         1        621.0    621.0      0.0          temp_folder_path = folder_path + "/temp"
    98         6       2766.0    461.0      0.0          for i in range(client_size):
    99        10      10528.0   1052.8      0.0              temp_path = "{}/SVM_{}_{}_{}-{}_temp.hdf5".format(
   100         5       1443.0    288.6      0.0                  temp_folder_path, examples, features, i, nodes)
   101        10       4930.0    493.0      0.0              temp_dataset.append(
   102        10    7436826.0 743682.6      0.0                  HDF5Dataset.empty(file_path=temp_path,
   103         5       1653.0    330.6      0.0                                    data_shape=(sub_features, ),
   104         5       1041.0    208.2      0.0                                    targets_shape=(),
   105         5       2565.0    513.0      0.0                                    dtype=np.int64))
   106                                               else:
   107                                                   src_path = "{}/SVM_{}_{}_{}-{}.hdf5".format(folder_path, examples,
   108                                                                                               features, global_rank,
   109                                                                                               nodes)
   110                                                   src_dataset = HDF5Dataset(file_path=src_path)
   111                                                   tgt_folder_path = folder_path + "/tgt"
   112                                                   tgt_path = "{}/SVM_{}_{}_{}-{}_tgt.hdf5".format(
   113                                                       tgt_folder_path, examples, features, global_rank, nodes)
   114                                                   tgt_dataset = HDF5Dataset.empty(file_path=tgt_path,
   115                                                                                   data_shape=(features, ),
   116                                                                                   targets_shape=(),
   117                                                                                   dtype=np.int64)
   118                                                   node = Node(src_dataset, tgt_dataset, global_comm, client_comm)
   119                                           
   120                                               # print("start test...")
   121         1       3536.0   3536.0      0.0      timer.set_time_point("start_test")
   122         2       7375.0   3687.5      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   123         1      22943.0  22943.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   124         1       7353.0   7353.0      0.0          node.getTotalDataRecv()))
   125                                           
   126                                               #* encrypted ID
   127         1        230.0    230.0      0.0      if is_server:
   128         1        250.0    250.0      0.0          id_enc = None
   129                                               else:
   130                                                   prf = PRF(secret_key=secret_key)
   131                                                   id_enc = np.vectorize(prf.compute)(node.src_dataset.ids[...])
   132         1   23774746.0    2e+07      0.0      id_enc_gather = node.gather(id_enc, server_rank)
   133                                           
   134                                               #* server-aid PSI
   135         1        211.0    211.0      0.0      if is_server:
   136         2 3036796699.0    2e+09      1.6          permutes, permute_length = node.find_intersection_indices(
   137         1        982.0    982.0      0.0              id_enc_gather[:-1])
   138                                               else:
   139                                                   pass
   140                                           
   141                                               #* seeds generation
   142         1        611.0    611.0      0.0      if is_server:
   143         1        662.0    662.0      0.0          pass
   144                                               else:
   145                                                   seeds = [(None if i == client_rank else np.array(
   146                                                       [[k + j * 10 + i * 100 + client_rank * 1000 for k in range(n)]
   147                                                        for j in range(sub_examples)]))
   148                                                            for i in range(client_size)]  #! test
   149                                                   # seeds = [(None if i == client_rank else SHPRG.genMatrixAES128(seed=token_bytes(16),n=sub_examples,m=n,EQ=EQ) ) for i in range(client_size)]
   150                                           
   151         1       7575.0   7575.0      0.0      timer.set_time_point("server_psi")
   152         2      12635.0   6317.5      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   153         1      35477.0  35477.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   154         1       6041.0   6041.0      0.0          node.getTotalDataRecv()))
   155                                           
   156                                               #* share
   157         1       1192.0   1192.0      0.0      round_examples = sub_examples // chunk + (1 if sub_examples % chunk != 0
   158                                                                                         else 0)
   159         1        171.0    171.0      0.0      if is_server:
   160         1       1373.0   1373.0      0.0          def sharesend_thread(rank):
   161                                                       for i in range(round_examples):
   162                                                           recv = node.recv(source=rank, tag=i)
   163                                                           temp_dataset[rank].add(data=recv[0], targets=recv[1])
   164                                           
   165         2        3e+10    2e+10     16.3          with ThreadPoolExecutor(max_workers=client_size) as executor:
   166         1     684111.0 684111.0      0.0              executor.map(sharesend_thread, range(client_size))
   167                                               else:
   168                                                   with_targets = node.src_dataset.with_targets
   169                                           
   170                                                   data_to_server = np.empty((chunk, sub_features), dtype=np.int64)
   171                                                   targets_to_server = np.empty(
   172                                                       (chunk, target_length), dtype=np.int64) if with_targets else None
   173                                                   index = 0
   174                                           
   175                                                   for i in range(round_examples):
   176                                                       rest = min(sub_examples - index, chunk)
   177                                                       data_to_server[:rest] = encoder.encode(node.src_dataset.data[index:index + rest])
   178                                                       if with_targets:
   179                                                           targets_to_server[:rest] = encoder.encode(
   180                                                               node.src_dataset.targets[index:index + rest]).reshape(
   181                                                                   rest, target_length)
   182                                                       for k in range(client_size):
   183                                                           if k == client_rank:
   184                                                               continue
   185                                                           output_prg = mod_range(
   186                                                               shprg.genRandom(seeds[k][index:index + rest]),
   187                                                               p).astype(np.int64)
   188                                                           data_to_server[:rest] -= output_prg[:, :sub_features]
   189                                                           if with_targets:
   190                                                               targets_to_server[:rest] -= output_prg[:, sub_features:sub_features +
   191                                                                                    target_length]
   192                                                       index += rest
   193                                                       if target_length == 1:
   194                                                           node.send(
   195                                                               (data_to_server[:rest], targets_to_server[:rest].ravel()
   196                                                                if with_targets else None),
   197                                                               dest=server_rank,
   198                                                               tag=i)
   199                                                           continue
   200                                                       node.send((data_to_server[:rest],
   201                                                                  targets_to_server[:rest] if with_targets else None),
   202                                                                 dest=server_rank,
   203                                                                 tag=i)
   204                                           
   205         1       6342.0   6342.0      0.0      timer.set_time_point("dset_share")
   206         2       9939.0   4969.5      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   207         1      22292.0  22292.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   208         1       7053.0   7053.0      0.0          node.getTotalDataRecv()))
   209                                           
   210                                               # seeds share
   211         1        501.0    501.0      0.0      if is_server:
   212         1        270.0    270.0      0.0          pass
   213                                               else:
   214                                                   seeds_exchanged = node.alltoall(seeds, in_clients=True)
   215                                           
   216         1       1303.0   1303.0      0.0      timer.set_time_point("seed_share")
   217         2       2395.0   1197.5      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   218         1       5430.0   5430.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   219         1       4960.0   4960.0      0.0          node.getTotalDataRecv()))
   220                                           
   221                                               # share_tras
   222         1        170.0    170.0      0.0      if is_server:
   223         1       4258.0   4258.0      0.0          all_deltas = [[] for _ in range(client_size)]
   224                                           
   225         1       1072.0   1072.0      0.0          def STsend_thread(rank):
   226                                                       for j in range(client_size):
   227                                                           if rank == j:
   228                                                               all_deltas[rank].append(None)
   229                                                               continue
   230                                                           delta = np.empty((sub_examples, n), dtype=object)
   231                                                           for k in range(n):
   232                                                               _delta = node.STsend(size=sub_examples,
   233                                                                                    permute=permutes[j],
   234                                                                                    recver=rank,
   235                                                                                    tag=j + k * 100)
   236                                                               delta[:, k] = _delta
   237                                                           all_deltas[rank].append(delta)
   238                                           
   239         2        4e+10    2e+10     23.3          with ThreadPoolExecutor(max_workers=client_size) as executor:
   240         1 4217650227.0    4e+09      2.2              executor.map(STsend_thread, range(client_size))
   241                                               else:
   242                                                   a_s = []
   243                                                   b_s = []
   244                                                   for rank in range(client_size):
   245                                                       if client_rank == rank:
   246                                                           a_s.append(None)
   247                                                           b_s.append(None)
   248                                                           continue
   249                                                       a = np.empty((sub_examples, n), dtype=object)
   250                                                       b = np.empty((sub_examples, n), dtype=object)
   251                                                       for k in range(n):
   252                                                           _a, _b = node.STrecv(size=sub_examples,
   253                                                                                sender=server_rank,
   254                                                                                tag=rank + k * 100)
   255                                                           a[:, k] = _a
   256                                                           b[:, k] = _b
   257                                                       a_s.append(a)
   258                                                       b_s.append(b)
   259                                           
   260         1       4679.0   4679.0      0.0      timer.set_time_point("share_tras")
   261         2      14607.0   7303.5      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   262         1      39965.0  39965.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   263         1       6262.0   6262.0      0.0          node.getTotalDataRecv()))
   264                                           
   265                                               # permute and share
   266         1        291.0    291.0      0.0      if is_server:
   267         1        601.0    601.0      0.0          seeds_exchanged = None
   268                                               else:
   269                                                   for i in range(client_size):
   270                                                       if client_rank == i:
   271                                                           continue
   272                                                       seeds_exchanged[i] = (seeds_exchanged[i] - a_s[i]) % q
   273         1  101879118.0    1e+08      0.1      seeds_share_gather = node.gather(seeds_exchanged, server_rank)
   274                                           
   275         1        331.0    331.0      0.0      if is_server:
   276         6       4606.0    767.7      0.0          for i in range(client_size):
   277        30      43262.0   1442.1      0.0              for rank in range(client_size):
   278        25      13426.0    537.0      0.0                  if i == rank:
   279         5        831.0    166.2      0.0                      continue
   280        20   91651079.0    5e+06      0.0                  seeds_share_gather[i][rank] = (
   281        40   88074532.0    2e+06      0.0                      seeds_share_gather[i][rank][permutes[rank]] +
   282        40      36880.0    922.0      0.0                      all_deltas[i][rank]) % q
   283         1        812.0    812.0      0.0          seed1s_s = seeds_share_gather
   284                                               else:
   285                                                   seed2s = b_s
   286                                           
   287         1      12374.0  12374.0      0.0      timer.set_time_point("perm_share")
   288         2      15109.0   7554.5      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   289         1      34084.0  34084.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   290         1       6422.0   6422.0      0.0          node.getTotalDataRecv()))
   291                                           
   292                                               # share intersection size
   293         1        391.0    391.0      0.0      if is_server:
   294         1        350.0    350.0      0.0          pass
   295                                               else:
   296                                                   permute_length = None
   297         1      77454.0  77454.0      0.0      permute_length = global_comm.bcast(permute_length, root=server_rank)
   298                                           
   299                                               # sys.exit()
   300                                           
   301                                               # tgt dataset server send
   302         1       2524.0   2524.0      0.0      round_inter = permute_length // chunk + (1 if permute_length % chunk != 0
   303                                                                                        else 0)
   304         1        651.0    651.0      0.0      if is_server:
   305         1       1874.0   1874.0      0.0          def tgt_dataset_send(rank):
   306                                                   # for rank in range(client_size):
   307                                                       with_targets = (rank == targets_rank)
   308                                           
   309                                                       data_to_client = np.empty((chunk, sub_features), dtype=np.int64)
   310                                                       targets_to_client = np.empty(
   311                                                           (chunk,
   312                                                            target_length), dtype=np.int64) if with_targets else None
   313                                                       index = 0
   314                                           
   315                                                       for i in range(round_inter):
   316                                                           rest = min(permute_length - index, chunk)
   317                                                           for j in range(rest):
   318                                                               perm_index = permutes[rank][index + j]
   319                                                               data_to_client[j] = temp_dataset[rank].data[perm_index]
   320                                                               if with_targets:
   321                                                                   targets_to_client[j] = temp_dataset[rank].targets[
   322                                                                       perm_index].reshape((1, target_length))
   323                                                           for k in range(client_size):
   324                                                               if k == rank:
   325                                                                   continue
   326                                                               output_prg = mod_range(
   327                                                                   shprg.genRandom(seed1s_s[k][rank][index:index + rest]),
   328                                                                   p).astype(np.int64)
   329                                                               data_to_client[:rest] += output_prg[:, :sub_features]
   330                                                               if with_targets:
   331                                                                   targets_to_client[:rest] += output_prg[:, sub_features:sub_features+target_length]
   332                                                           index += rest
   333                                                           if target_length == 1:
   334                                                               node.send(
   335                                                                   (data_to_client[:rest], targets_to_client[:rest].ravel()
   336                                                                   if with_targets else None),
   337                                                                   dest=rank,
   338                                                                   tag=i)
   339                                                               continue
   340                                                           node.send(
   341                                                               (data_to_client[:rest],
   342                                                                   targets_to_client[:rest] if with_targets else None),
   343                                                               dest=rank,
   344                                                               tag=i)
   345                                           
   346         2        1e+11    5e+10     56.2          with ThreadPoolExecutor(max_workers=client_size) as executor:
   347         1    1053581.0    1e+06      0.0              executor.map(tgt_dataset_send, range(client_size))
   348                                               else:
   349                                                   index = [0] * client_size
   350                                                   data = np.empty((chunk, features), dtype=np.int64)
   351                                                   targets = np.empty((chunk,target_length), dtype=np.int64)
   352                                                   for i in range(round_inter):
   353                                                       recv = node.recv(source=server_rank, tag=i)
   354                                                       rest = len(recv[0])
   355                                                       # print(rest)
   356                                                       for rank in range(client_size):
   357                                                           if client_rank == rank:
   358                                                               data[:rest, rank * sub_features:(rank + 1) *
   359                                                                    sub_features] = recv[0]
   360                                                               if rank == targets_rank:
   361                                                                   targets[:rest]= recv[1].reshape((rest, target_length))
   362                                                               continue
   363                                                           output_prg = mod_range(
   364                                                               shprg.genRandom(seed2s[rank][index[rank]:index[rank] + rest]),
   365                                                                 p).astype(np.int64)
   366                                                           data[:rest, rank * sub_features:(rank + 1) *
   367                                                                sub_features] = output_prg[:, :sub_features]
   368                                                           if rank == targets_rank:
   369                                                               targets[:rest] = output_prg[:, sub_features:sub_features+target_length]
   370                                                           index[rank] += rest
   371                                                       if target_length == 1:
   372                                                           node.tgt_dataset.add(data=data[:rest],
   373                                                                                targets=targets[:rest].ravel())
   374                                                           continue
   375                                                       node.tgt_dataset.add(data=data[:rest], targets=targets[:rest])
   376                                           
   377                                                   # print(node.tgt_dataset.targets[1])
   378                                           
   379         1       5370.0   5370.0      0.0      timer.set_time_point("tgt_final ")
   380         2      15719.0   7859.5      0.0      print("{}: Rank {} - send: {:.4f} MB, recv: {:.4f} MB".format(
   381         1      37229.0  37229.0      0.0          timer.currentlabel, global_rank, node.getTotalDataSent(),
   382         1       7825.0   7825.0      0.0          node.getTotalDataRecv()))
   383         1       2134.0   2134.0      0.0      print("intersection size:{}".format(permute_length))
   384         1      25798.0  25798.0      0.0      print(timer)
   385                                           
   386         1      58970.0  58970.0      0.0      file.close()

